<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每周见闻：TypeScript 的类型系统可以运行毁灭战士</title>
    <link href="/weekly/2025/03/09/09-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250302_20250309/"/>
    <url>/weekly/2025/03/09/09-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250302_20250309/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-03-02 - 2025-03-09</p><blockquote><p>周刊：<a href="https://konata9.github.io/weekly/">此方的手帐 - 周刊</a><br>微信公众号：</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>AI 时代下，除了显卡，下一个吃紧的会不会是内存？</p><p>对于使用 AI 的人来说，无论是本地模型还是 Agent 都是需要内存。有次在开了 4、5 个 Windsuf 后，我的 MBP（16 G）竟然跳出内存不够的警告。</p><p>打开 Activity Monitor 观察，只要 Windsuf 打开的时间一长。内存使用就直接翻黄。别提还有 Chrome、Teams 等其他“大户”。没想到有一天能在 Mac 上体验到卡顿。</p><p>再者苹果的笔记本也同意 16 G 内存起步，这次新款 Air 还支持到了 32 G 内存。可想随着今后的发展，各个软件对内存的需求只会越来越高。下次再有换电脑的需求时，可能得考虑内存的容量了。</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://socket.dev/blog/typescript-types-running-doom">TypeScript 的类型系统可以运行毁灭战士</a>[^1]</strong></p><p>标签：TypeScript,FUN</p><p>是的，你并没有看错。一位国外的大神使用 TypeScript（修改后的版本） 的<strong>类型系统</strong>成功运行了经典游戏 DOOM（毁灭战士）。为了做到这一点，他构建了一整套在 TypeScript 类型系统内的计算机系统，包括：</p><ol><li>RAM</li><li>磁盘系统</li><li>调用栈</li><li>子程序</li><li>内存指针</li><li>执行上下文</li></ol><p>活脱脱地手搓了一个系统，一些类型定义的文件更是多大了十多万行。作者修改了 TS 的各种限制，以支持各种超乎寻常的情况。</p><p>并且由于数量庞大，每次运行都要消耗 100G 内存。同时没有 IDE 能支持如此庞大的文件量；甚至连错误信息都只有内存溢出，完完全全的开发噩梦。</p><p>在如此严苛的条件下，作者坚持一年终于完成。为了渲染游戏的第一帧，项目需要在 12 天内处理 177 TB TypeScript 类型定义。</p><p>文章主要介绍了工作过程与难点，并且有一个简单的介绍视频。不得不说真的太牛了。这简直是体操中的体操了。</p><p>之前在看“神光”大神的 TS 类型体操的小册里，就有提到<br> TypeScript 的类型系统是图灵完备的，也就是能描述各种可计算逻辑。简单点来理解就是循环、条件等各种 JS 里面有的语法它都有，JS 能写的逻辑它都能写。</p><p>看来真的是一点都不假。</p><p><img src="https://cdn.sanity.io/images/cgdhsj6q/production/6ef017320c7bebf0c17e1ecf78c3e6fa5d6ae623-1792x1024.webp?w=1000&fit=max&auto=format"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.howtogeek.com/why-i-switched-to-firefox-and-never-looked-back/">为什么我切换到Firefox并从此不再回头</a>[^2]</strong></p><p>标签：Tools</p><p>本文介绍了作者在旧电脑上的 Chrome 占用太多内存，从而用回 FireFox 的原因。在 Chrome 上能做的事，FireFox 也都能做，并且在多标签的情况下内存占用更少。并且在标签管理上也比 Chrome 更为友好。</p><p>最近我也面临内存的问题，也打算切换一下试试。</p><p><img src="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2025/01/firefox-logo-at-the-center-with-fire-surrounding-the-image.jpg"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://github.com/hkdobrev/cleanmac">GitHub - hkdobrev&#x2F;cleanmac: 用脚本清理你的macOS，无需昂贵的应用</a>[^3]</strong></p><p>标签：Tools</p><p>一个清理 Mac 系统的脚本，用来释放磁盘空间、内存等。<br>主要清除了系统日志、brew 的安装包、npm 依赖、不用的 docker 镜像。</p><p>在公司的电脑上试着跑了一下，因为东西太多，还挺花时间的。</p><p>类似的应用有 CleanMyMac、腾讯的 Lemon 等，都挺好用的。</p><p><img src="https://opengraph.githubassets.com/97d72df8b6f376507d1869968b22f1e7a3e81339374942fbc28872dcd0e4bd0c/hkdobrev/cleanmac"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 密歇根TypeScript创始人成功在类型系统内运行毁灭战士游戏…: <a href="https://socket.dev/blog/typescript-types-running-doom">https://socket.dev/blog/typescript-types-running-doom</a></li><li>[2] 为什么我切换到Firefox并从此不再回头: <a href="https://www.howtogeek.com/why-i-switched-to-firefox-and-never-looked-back/">https://www.howtogeek.com/why-i-switched-to-firefox-and-never-looked-back/</a></li><li>[3] GitHub - hkdobrev&#x2F;cleanmac: 用脚本清理你的macOS，无需昂贵的应用: <a href="https://github.com/hkdobrev/cleanmac">https://github.com/hkdobrev/cleanmac</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：所有代码都是技术债</title>
    <link href="/weekly/2025/03/02/08-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250223_20250302/"/>
    <url>/weekly/2025/03/02/08-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250223_20250302/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-23 - 2025-03-02</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><img src="https://cdn.beekka.com/blogimg/asset/202403/bg2024030702.webp"></p><p>这周读完阮一峰老师的周刊，发现去年的这周标题是「所有代码都是技术债」，便再去阅读了一遍。</p><p>结合自己工作下来的感受，我觉得还能再加一个定语“所有需要维护的代码都是技术债”。</p><p>如果一段代码没人使用，或者只是一次性的，倒也无所谓。但需要维护的代码里，每一行可能都会变成未来的债务。漏洞的修复、功能的添加，没人知道昨天的代码会给今天带来的是坑还是洞。上一个人的”花活”会不会是下一个的“噩梦”。</p><p>所以我对自己的要求便是，在尽可能满足现有需求以及可读性的前提下，写最少的代码。适当地留出抽象的空间，反而能减轻日后的工作。有点像国画中的“留白”。</p><p>毕竟如果没有需求，就不用改动；反之结合新需求针对性地做抽象，也能控制修改的范围。我觉得合理的抽象也应该是能减少代码量的。任何会让现有代码量增加的重构，都要三思。</p><p>工程化、各种范式&#x2F;模式、规约；再到强类型语言、内存安全语言、代码格式化工具以及项目管理等，都是前辈们想出的解决技术债务的方法。</p><p>但就像熵的增加一定的，需要维护的代码也注定会越来越庞大。也难怪 Github 上没有一行代码的 nocode 项目拥有 61k 的 star 了。</p><p>或许真到了哪天 AI 全面编写代码，完全不需要人来检查的时候，这个问题才会被解决吧。</p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://bruceyuan.com/post/deepseek-r1-paper-reading-notes.html">自顶向下方式深度解读 DeepSeek-R1，内含大量细节</a>[^1]</strong></p><p>标签：AI</p><p>一篇解读 DeepSeek R1 的技术文章。是作者阅读 DeepSeek 的 Paper 之后的提炼。介绍了技术原理和发展路线，不涉及具体的代码。</p><p>这周忙于处理底层框架替换的问题，只看了一个开头。之后有空了再来阅读。</p><p><img src="https://cfcdn.bruceyuan.com/blog/2025/deepseek-r1-reading-notes-20250216220356516.webp"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/">Smuggling arbitrary data through an emoji</a>[^2]</strong></p><p>标签：FUN</p><p>一篇利用 Unicode 的零宽字符在 Emoji 里“夹带私货”的文章。利用变体字符不会被解析显示且几乎能被复制下来的特性。</p><p>比如在 “g” 后面加上 U+FE01，即 “g\uFE01”。此时人只能看到字母”g”，但如果选中并且复制的话，则会把“g\uFE01”给复制下来。从而达到了“夹带私货”的目的。</p><p>这个特性能做什么呢？首先肯定能绕过人工审核；其次便是增加水印，进行数据追踪。</p><p><img src="https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/tokenizer.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://qr.windliang.wang/">链图 - 链接转图片工具</a>[^3]</strong></p><p>标签：Tools</p><p>一个小工具，可以把连接地址转换为带有二维码的图片，很适合用于社交平台的分享，比如公众号等不能在正文中插入连接的情况。</p><p><img src="/weekly/images/2025/link-pic.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 自顶向下方式深度解读 DeepSeek-R1，内含大量细节: <a href="https://bruceyuan.com/post/deepseek-r1-paper-reading-notes.html">https://bruceyuan.com/post/deepseek-r1-paper-reading-notes.html</a></li><li>[2] Smuggling arbitrary data through an emoji: <a href="https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/">https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/</a></li><li>[3] 链图 - 链接转图片工具: <a href="https://qr.windliang.wang/">https://qr.windliang.wang/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：杂谈AI取代程序员</title>
    <link href="/weekly/2025/02/23/07-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250216_20250223/"/>
    <url>/weekly/2025/02/23/07-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250216_20250223/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-16 - 2025-02-23</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈AI取代程序员</a>[^2]</strong></p><p>标签：思考</p><p>强烈建议对这个话题感兴趣的小伙伴去阅读一下原文。这里放一下原文对于 AI 取代论背后动机的分析，我觉得很有道理。</p><blockquote><p> 除去真的担心自己被AI取代的从业者外，我觉得看到两种扯着AI大旗的人。</p><p> 一种就是懂程序开发，装不懂程序开发，然后贩卖焦虑的人，最近非常火的就是，「我用Cursor从0 xx 天开发了一个App」 (Cursor是最近一个很火的AI编辑器，可以通过输入的指令生成代码).</p><p>大体都是说自己完全不懂程序开发，借助AI&#x2F;Cursor, xx天内开发出了一个App, 并且冲到了苹果App Store热门榜第一.</p><p>普通程序员看到这种说法，一个小白从无到有都能开发出一个App, 难免会焦虑,不得不说，这种反向装弱再变强真的令人防不胜防， 想着不能被落下，就斥资加入各种付费群或者购买各种课程。</p><p>神智清明的你可能在心平气和下很难做出这样的决定嘛。<br>另外一种就是要用AI来取代程序的公司，说要通过AI来增效，裁撤工程师，比如国外的 Workday 裁员说要再招人做 AI 的新闻, 还有2023年 Google 因为AI裁员而30000 名员工的新闻。</p><p>因为说是AI取代了程序员，被毕业的员工们和待毕业的员工们都只会把裁员的原因归罪到AI上， 管理层的无所作为，墨守成规，决策失误，无序扩张这些失误都不需要承诺后果了，反正背锅有AI。</p><p>苦一苦员工，骂名AI来担。</p></blockquote><p>接下来聊聊我作为一名普通大龄程序员（非 CS 专业、无大厂经验、对日外包出身、从前端转后端）的感受。</p><p>说实话。刚开始有听到这个论点时，确实有些焦虑。但仔细一想，早在 AI 出现前就已经有低代码取代程序员这种说法了。</p><p>然而现实是，尽管有数十种低代码框架，但程序员依旧在干活。</p><p>对程序员来说，编程或者说开发，实际上占整个工作的比例是最少的。更多的是对需求的理解与分析、技术的选型、架构&#x2F;逻辑的设计、系统部署等问题。针对大型项目，还要考虑任务拆解、人员安排、系统负载、成本控制等众多因素。而这其中除了开发工作之外，都是目前 AI 无法做到的事情。</p><p>就我个人使用体验而言，AI 在写单元测试、文档注释、ChangeLog 上非常有用，减轻了开发者的负担。同时针对一次性的脚本任务，也很不错。但基于现有系统的维护和开发，效果并不理想，还是需要人去介入。</p><p>毕竟从需求到设计就经过了一次翻译，从设计再到提示词，又是一次翻译。每多一次翻译就会造成一次损失，更何况开发者对提示词的理解又各不相同。那结果自然可想而知。</p><p>最后，再次引用原文中观点：</p><blockquote><p>AI现阶段还是无法取代程序员的，未来AI我也觉得很难取代程序员(当然，取代把需求翻译成代码的人肉翻译器还是有可能的)，因为程序员虽然是和机器打交道，但是本质上还是解决人的问题。</p><p>担忧程序员被AI取代的人可能只看到了测试场景里面的 happy path, 也就是AI能生成老板们想要的代码，没有看到unhappy path, 也就是老板们想要的代码, AI生成不出来要怎么办?</p><p>毕竟人可以根据已有的经验进行归纳总结，把已有的经验应用在未踏足的领域，且持续学习，但是AI还是受限于预训练数据，做不出来就是做不出来。</p><p>但是对程序员而言，AI不失为一个好用且提效的工具，好用的工具就应该多学多用多玩，而不是担忧被其取代。</p></blockquote><p>这是作者利用 AI 生成的街舞海报，是不是哪里很奇怪呢？<br><img src="https://ramsayleung.github.io/ox-hugo/genai_cover_image.jpg" alt="作者利用 AI 生成的街舞海报"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://sspai.com/post/96168">装修容易踩坑？这是我的避坑方法论 - 少数派</a>[^1]</strong></p><p>标签：Life</p><p>自从自己装修完之后就开始看这类家装攻略。有点像复盘，看看自己做的不到位和不足的地方。其实这些应该事先预习。</p><p>作者还是蛮厉害的，自己了很多功课甚至设计了图纸。很难得看到实际支出会比预算更低的情况。</p><p>评论区更是值得一看，有很多知识可以学习。有装修需求的小伙伴可以看看。</p><p><strong>2、<a href="https://ivanludvig.dev/tech/lake-colors">湖的名称是否反映其特性？</a>[^5]</strong></p><p>标签：Life</p><p>作者在法国的“绿湖”徒步后，湖水的绿色给他留下了深刻的印象。于是作者开始好奇湖的名称是否能反映其特性？</p><p>于是作者从网上搜集需要的数据并整理成 JSON 格式，然后又从卫星图片中获取对应湖中的一个像素作为颜色。最终结论是湖水的名称与其特性并不相关。</p><p>利用技术手段一步步实现自己的小目标。让我怀念起了刚开始学编程时的快乐与纯粹。</p><p><img src="https://ivanludvig.dev/assets/img/lakes/lac-vert.jpg" alt="作者徒步的绿湖"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://animate.style/">Animate.css | 跨浏览器CSS动画库</a>[^3]</strong></p><p>标签：CSS,前端</p><p>一个 CSS 动画特效库，通过给元素添加类名就能实现对应的动画效果。Github star 有 81 k。</p><p>官网上可以看到各种效果，纯 CSS 体积也很轻。之后如果有前端项目时可以使用。</p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://ishadeed.com/article/overflow-clip/">Overflow Clip属性解析</a>[^4]</strong></p><p>标签：前端,CSS</p><p>介绍了 CSS3 中 <code>overflow:clip</code> 属性。clip 有裁剪的含义，可以裁剪超出父元素的部分，并且不会出现滚动条。类似 overflow:hidden + 滚动条隐藏或者绝对定位等样式组合。</p><p>作者给出了非常详细与易懂的说明和例子，可以做出许多效果。如标题头部、滚动动画、重叠边框等。</p><p><img src="https://ishadeed.com/_astro/hero-clip-1.Br_jpHnV_ZAciKn.webp"></p><p><strong>2、<a href="https://www.yazeedb.com/posts/deeply-understand-currying-in-7-minutes">7分钟深入理解柯里化 - Yazeed Bzadough</a>[^6]</strong></p><p>标签：JavaScript,TypeScript</p><p>面试八股之一的“柯里化”。针对多个参数，进行简化。</p><p>这篇主要介绍实现方法以及调试过程。核心是利用 function 的 length 与闭包实现柯里函数。我自己在工作中遇到的不多，也不太会主动使用。</p><p><img src="https://www.yazeedb.com/media/dog-properly-currying-a-function.jpeg"></p><p><strong>3、<a href="https://joshtronic.com/2025/02/16/how-to-move-the-first-element-to-the-end-in-javascript/">JavaScript中如何将首元素移至末尾</a>[^7]</strong></p><p>标签：前端,JavaScript</p><p>一篇简短的文章，主要讲了现代 Web 开发里利用 <code>container.appendChild(container.firstElementChild);</code> 可以很容易把第一个元素到末尾。具体的应用就是走马灯效果。</p><p>回想十年前做前端时，走马灯的实现会刻意在末尾多重复一次第一个元素，从而使得动画效果看起来是连贯，通过 setInterval 来计算距离和速度。需要写非常多的代码。</p><p><img src="https://joshtronic.com/wp-content/uploads/2025/02/A-clean-and-minimalistic-illustration-of-DOM-manipulation-in-JavaScript.-The-image-should-depict-a-simple-webpage-layout-with-rectangular-blocks-repre.webp"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 装修容易踩坑？这是我的避坑方法论 - 少数派: <a href="https://sspai.com/post/96168">https://sspai.com/post/96168</a></li><li>[2] 杂谈AI取代程序员: <a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/</a></li><li>[3] Animate.css | 跨浏览器CSS动画库: <a href="https://animate.style/">https://animate.style/</a></li><li>[4] Overflow Clip属性解析: <a href="https://ishadeed.com/article/overflow-clip/">https://ishadeed.com/article/overflow-clip/</a></li><li>[5] 湖的名称是否反映其特性？: <a href="https://ivanludvig.dev/tech/lake-colors">https://ivanludvig.dev/tech/lake-colors</a></li><li>[6] 7分钟深入理解柯里化 - Yazeed Bzadough: <a href="https://www.yazeedb.com/posts/deeply-understand-currying-in-7-minutes">https://www.yazeedb.com/posts/deeply-understand-currying-in-7-minutes</a></li><li>[7] JavaScript中如何将首元素移至末尾: <a href="https://joshtronic.com/2025/02/16/how-to-move-the-first-element-to-the-end-in-javascript/">https://joshtronic.com/2025/02/16/how-to-move-the-first-element-to-the-end-in-javascript/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：AI 正在造就一代“文盲”程序员</title>
    <link href="/weekly/2025/02/16/06-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250209_20250216/"/>
    <url>/weekly/2025/02/16/06-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250209_20250216/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-09 - 2025-02-16</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://deno.com/blog/deno-v-oracle2">Oracle 曾用 Node.js 证明其 JavaScript 商标权——现在却想推翻这一立场</a>[^1]</strong></p><p>标签：JavaScript,Node.js</p><p>2 年前，Node 和 Deno 的作者期望 Oracle 释放 JavaScript 商标权，然而 Oracle 并没有任何回应。</p><p>于是作者在去年 9 月发表了公开信后，于 11 月向美国专利商标局申请取消 Oracle 的 JavaScript 商标权。这次 Oracle 在截止日提交了动议，继续拖延该问题。</p><p>关于 JavaScript 这个名字的故事，前端的小伙伴应该不会陌生。Oracle 的主业是数据库，和前端以及 JavaScript 并没有交集。因为收购了 Sun 才拥有了 JavaScript 的商标。也正是因为这个商标的问题，才会有 ECMAScript 让人混淆的名称。</p><p>如果支持作者的提议，也可以去文章最后的公开信里签名。非常方便，授权一下 Github 账号即可。</p><p><img src="/weekly/images/2025/oracle-js.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://www.ncurator.com/zh">馆长-知识库AI问答助手</a>[^2]</strong></p><p>标签：AI</p><p>Chrome 的 AI 插件，利用 RAG 管理并创造本地知识库。支持文件导入、网页总结等。相当于把个人知识库放到统一的地方，由 AI 管理并回答。支持云端以及本地模型。</p><p><img src="/weekly/images/2025/ncurator.png"></p><p><strong>2、<a href="https://liveblocks.io/blog/which-rich-text-editor-framework-should-you-choose-in-2025#introduction">2025，你会选择哪个富文本编辑器？ | Liveblocks Blog</a>[^4]</strong></p><p>标签：前端,JavaScript,Tools</p><p>因为知道有个 WangEditor，就好奇地去看看会不会被提到。</p><p>果然没有，可能作者是外国人并不了解吧。主要介绍了国外的富文本框架有 Tiptap, BlockNote, Lexical 等 11 个，既有功能丰富也有只提供核心功能的。</p><p>因为不做前端了，具体功能就不细看了。文章最后作者做了非常详细的对比表格。</p><p>这些国外的框架是基础功能免费，附加功能或者服务支持收费的模式。想到 WangEditor 却因为收益不够而不得不暂停维护，还是有些感慨的。如果不能带来收益，再好的产品也很难坚持下去。</p><p>WangEditor 官网：<a href="https://www.wangeditor.com/">https://www.wangeditor.com/</a><br>WangEditor 现状：<a href="https://juejin.cn/post/7272735633458413602#heading-4">https://juejin.cn/post/7272735633458413602#heading-4</a></p><p><img src="https://liveblocks.io/images/blog/social-images/choosing-the-right-text-editor-for-your-app.jpg"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://nmn.gl/blog/ai-illiterate-programmers">AI 正在造就一代“文盲”程序员</a>[^3]</strong></p><p>标签：思考,AI</p><p>一篇被讨论很多的文章。作者认为 AI 正在造就一代“文盲”程序员。起因是作者发现如果没有 AI的帮助，根本不愿意去解决一个 AWS 的错误。由于有了 AI，作者开始不再仔细阅读文档；成为了一个人形剪切板；也不愿意去思考而是完成 AI 的实现；不再从编程中获得乐趣。</p><p>对此，作者给出了一些“复健”计划</p><ol><li>仔细阅读错误信息。</li><li>实际进行调试。</li><li>从零开始编码。</li><li>阅读源码而非求助于 AI。</li></ol><p>读完后总有一种似曾相识的感觉，互联网在开始时也被视作洪水猛兽。但说到底，工具时好时坏还是取决于对 AI 的定位与使用方式。之前 1:1 时老大也提到过类似的观点：你应该主导 AI 做什么而不是被 AI 牵着鼻子走。</p><p>你提供自己的思考框架，让 AI 来填充。那么AI 是一个强力的辅助工具，能帮助你节省时间提高效率。如果反过来，你就会变成 AI 的打工仔，久而久之便丧失了自己的理解与思考。</p><p><img src="https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror=redirect,quality=80/uploads/asset/file/e7b24776-a98a-4a27-a079-2426fd468ffd/image.png?t=1737992598"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Oracle 曾用 Node.js 证明其 JavaScript 商标权——现在却想推翻这一立场: <a href="https://deno.com/blog/deno-v-oracle2">https://deno.com/blog/deno-v-oracle2</a></li><li>[2] 馆长-知识库AI问答助手: <a href="https://www.ncurator.com/zh">https://www.ncurator.com/zh</a></li><li>[3] AI 正在造就一代“文盲”程序员: <a href="https://nmn.gl/blog/ai-illiterate-programmers">https://nmn.gl/blog/ai-illiterate-programmers</a></li><li>[4] 2025 年该选择哪个富文本编辑器框架？ | Liveblocks Blog: <a href="https://liveblocks.io/blog/which-rich-text-editor-framework-should-you-choose-in-2025#introduction">https://liveblocks.io/blog/which-rich-text-editor-framework-should-you-choose-in-2025#introduction</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-02-02 - 2025-02-09</title>
    <link href="/weekly/2025/02/09/05-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250202_20250209/"/>
    <url>/weekly/2025/02/09/05-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250202_20250209/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-02 - 2025-02-09</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://yazi-rs.github.io/">Yazi</a>[^1]</strong></p><p>标签：Tools,Mac</p><p>闲逛 B 站时推送的视频，被名字吸引。是一个终端的文件管理工具。特别适合平时在终端工作的同学。作者也是一个国人大佬：三咲雅 · Misaki Masa</p><p>使用下来体验很棒，绝非传统的 cd&#x2F;ls&#x2F;cat 命令组合能比的。还能配合 Neovim 非常丝滑。</p><p>推荐插件：</p><ol><li>yazi.nvim: Neovim 插件。 <a href="https://github.com/mikavilpas/yazi.nvim">https://github.com/mikavilpas/yazi.nvim</a></li><li>full-border: 瞬间让 yazi 的界面高大上起来。 <a href="https://github.com/yazi-rs/plugins/tree/main/full-border.yazi">https://github.com/yazi-rs/plugins/tree/main/full-border.yazi</a></li><li>icons-brew: 为不同的文件添加 icon，让界面更美观。 <a href="https://github.com/lpnh/icons-brew.yazi">https://github.com/lpnh/icons-brew.yazi</a></li></ol><p><img src="https://yazi-rs.github.io/img/logo.png"></p><p><strong>2、<a href="https://readpo.com/zh/poster">ReadPo</a>[^4]</strong></p><p>标签：Tools,AI</p><p>在寻找 Markdown 转图片时找到的这个网站。提供了一个免费的在线转换工具。</p><p>这个网站主要的功能是基于主题的 AI 辅助写作工具。同一个主题下可以订阅不同的源，如 Google、RSS 等，AI 可以根据这些内容生成文章。主要的应用场景就是新闻、资讯介绍、事件追踪等文章。</p><p>免费版支持 2 个主题，每月 30 个 cridets。每个主题可以根据 5 个文章生成 AI 总结内容，挺有意思的工具。</p><p><img src="/weekly/images/2025/readpo.webp"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://www.infoworld.com/article/2269523/put-business-logic-in-the-application-not-the-database.html">Put business logic in the application, not the database</a>[^2]</strong></p><p>标签：架构,Design</p><p>有些年头的文章了，其主旨是尽可能地把业务逻辑放到应用层而非数据库，并且给出了原因：</p><ol><li>数据库比起应用层，资源更加稀缺。</li><li>逻辑后移到数据库会增加负担，造成应用层资源的浪费。</li><li>数据库拓展成本比应用层更高。</li></ol><p>应该是针对 SQL 存储过程写的。我在实际工作中主要使用 MongoDB，基本不会出现业务逻辑在数据库的情况也没人会在业务中做聚合。（真做了也过不了 Code Review）</p><p>尽管如此，数据库的成本也远高于服务器的成本。上云之后，拓展不是问题，剩下的只是钱的问题。</p><p><img src="https://www.infoworld.com/wp-content/uploads/2024/06/broken-chain_metal_link_breach_security-100777433-orig.jpg?resize=1024,683&quality=50&strip=all"></p><p><strong>2、<a href="https://www.joshwcomeau.com/css/custom-css-reset/">A Modern CSS Reset • Josh W. Comeau</a>[^3]</strong></p><p>标签：CSS,前端</p><p>这篇介绍了现代版本的 CSS reset。10 年前各个浏览器之间差异很大，开发时会用上一份 CSS reset 样式尽可能抹平这些差异。</p><p>比较经典的是 Eric Meyers 2011 年的版本，早年入坑的前端小伙伴可能都有点印象。 <a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></p><p>随着 IE 退场已经对 CSS 新特性的支持增加。如今的 CSS reset 内容要简洁许多。我现在主要做 Node.js 服务端开发，就不去逐条查看了。作者针对每一条都有说明，感兴趣的前端同学可以去看看。</p><p><img src="https://www.joshwcomeau.com/images/og-custom-css-reset.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Yazi: <a href="https://yazi-rs.github.io/">https://yazi-rs.github.io/</a></li><li>[2] Put business logic in the application, not the database: <a href="https://www.infoworld.com/article/2269523/put-business-logic-in-the-application-not-the-database.html">https://www.infoworld.com/article/2269523/put-business-logic-in-the-application-not-the-database.html</a></li><li>[3] A Modern CSS Reset • Josh W. Comeau: <a href="https://www.joshwcomeau.com/css/custom-css-reset/">https://www.joshwcomeau.com/css/custom-css-reset/</a></li><li>[4] ReadPo: <a href="https://readpo.com/zh/poster">https://readpo.com/zh/poster</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-26 - 2025-02-02</title>
    <link href="/weekly/2025/02/02/04-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250126_20250202/"/>
    <url>/weekly/2025/02/02/04-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250126_20250202/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-26 - 2025-02-02</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://ghostty.org/">Ghostty</a>[^1]</strong></p><p>标签：Tools</p><p>一个终端模拟器，类似 iTerm2、Tabby。利用了 GPU 和 CPU 加速。</p><p>目前使用下来体验不错，速度比 iTerm2 和 Tabby 要快且无缝支持 zsh 的配置。唯一的缺点是配置文件需要自己去看文档写，没有 GUI 界面。</p><p><img src="https://ghostty.org/social-share-card.jpg"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://arktype.io/">ArkType</a>[^2]</strong></p><p>标签：Resource,JavaScript,TypeScript</p><p>一个类似于 Joi 的校验库。官网上写着有更好的错误提示、性能上也比其他库如 Zod、Yup 要强。</p><p>工作中使用 Joi，但苦于其效率和多版本之间的冲突也一直在看其他类似的库。这个库比较新，生态方面并没有 Zod 完善，考虑到迁移和文档自动生成的成本，选择 Zod 的可能性更高。</p><p><img src="/weekly/images/2025/arktype.webp"></p><p><strong>2、<a href="https://nalanj.dev/posts/safe-assignment/">Safe Assignment | Alan Johnson</a>[^3]</strong></p><p>标签：JavaScript</p><p>一个关于 JS try&#x2F;catch 语法的新提案。<br>const [error, value] ?&#x3D; maybeThrows();<br>看着像 Go 的语法，主要是节约了 try&#x2F;catch 的代码长度以及避免在外层多定义 let 来对错误做处理。</p><p>文章给出了类似的实现，看了更有种回调时期的感觉。不过同样的讨论，之前翻译过的一篇感觉说的更清新一些。<br>译：在 TypeScript 中像 Go 和 Rust 那样处理错误？没有 Try&#x2F;Catch(<a href="https://konata9.github.io/2024/05/10/2024/translate-ts-with-go-and-rust-errors/)">https://konata9.github.io/2024/05/10/2024/translate-ts-with-go-and-rust-errors/)</a></p><p><img src="/weekly/images/2025/safe-assignment.webp"></p><p><strong>3、<a href="https://docs.timetime.in/blog/how-long-is-a-second-in-js/">How long is a second in JavaScript? | TimeTime</a>[^4]</strong></p><p>标签：JavaScript</p><p>很不错的一篇文章，从 1 秒入手介绍了 JavaScript 中时间相关的知识。 UTC 和 POSIX 的区别，特别是对于闰秒的处理。更多的是通用概念的介绍。</p><p><img src="https://external-preview.redd.it/problematic-second-how-the-leap-second-occurring-only-27-v0-Z9P05vL4s6Z3mcXjAxcxwy6C8p64zhxV_-vlWRmRmkQ.jpg?auto=webp&s=e7112eb8e30bef1ac3b1cb98c817c9f48b7bd0a2"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Ghostty: <a href="https://ghostty.org/">https://ghostty.org/</a></li><li>[2] ArkType: <a href="https://arktype.io/">https://arktype.io/</a></li><li>[3] Safe Assignment | Alan Johnson: <a href="https://nalanj.dev/posts/safe-assignment/">https://nalanj.dev/posts/safe-assignment/</a></li><li>[4] How long is a second in JavaScript? | TimeTime: <a href="https://docs.timetime.in/blog/how-long-is-a-second-in-js/">https://docs.timetime.in/blog/how-long-is-a-second-in-js/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-19 - 2025-01-26</title>
    <link href="/weekly/2025/01/26/03-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250119_20250126/"/>
    <url>/weekly/2025/01/26/03-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250119_20250126/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-19 - 2025-01-26</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack">EP146: The Open Source AI Stack</a>[^1]</strong></p><p>标签：架构</p><p>ByteByteGo 的 Newsletter。可以用 RSS Hub 作为 RSS 订阅。每周一篇都是和架构相关内容。图片做的非常棒。</p><p>这篇我着重看了鉴权方式的部分。Cookies Vs Sessions Vs JWT Vs PASETO 介绍了常见的几种鉴权方式以及优缺点。除了 PASETO 没有接触过，之后要找机会了解一下。</p><p><img src="https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1c328642-7222-4127-a6c5-16614e010022_1283x1536.jpeg"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.dev-life.site/">自洽的程序员</a>[^2]</strong></p><p>标签：Life,工作,思考</p><p>我看的两个周刊都在推这本书。书名虽然带着“程序员”，但内容主要集中于调整工作中的心态。每一篇都很短，阅读起来没有负担。没有专业名词、没有方法论，更像是一个学长&#x2F;前辈跟你聊天的感觉， 轻松的同时也有所收获。</p><p>我阅读了第三章并回顾工作中的一些表现，确实还有需要改进的地方。很受用，非常值得一读。</p><p>放一些我认为不错的观点：<br> 工作中的挣扎就像人生的必修课：不是你的错，但要你来解决。不是你能控制的，但要你来负责。不是你想要的，但要你来面对。</p><p> 工作就像人生的一个维度：它很重要，但不是唯一。它需要投入，但要有度。它值得认真，但别太执着。</p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://d2lang.com/">Home | D2 Documentation</a>[^3]</strong></p><p>标签：Tools</p><p>类似 Markdown 中作图的方式，通过写代码的方式来制作类图、流程图等。语法比 Mermaid 要复杂，但相对的做出的图片的效果也比 Mermaid 更好。</p><p>个人还是比较喜欢代码做图的方式，容易保存和修改。等有机会试一下。</p><p><img src="https://d2lang.com/img/opengraph.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] EP146: The Open Source AI Stack: <a href="https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack">https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack</a></li><li>[2] 自洽的程序员: <a href="https://www.dev-life.site/">https://www.dev-life.site/</a></li><li>[3] Home | D2 Documentation: <a href="https://d2lang.com/">https://d2lang.com/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-12 - 2025-01-19</title>
    <link href="/weekly/2025/01/19/02-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250112_20250119/"/>
    <url>/weekly/2025/01/19/02-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250112_20250119/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-12 - 2025-01-19</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://icemenubar.app/">Ice - Menu Bar Manager</a>[^1]</strong></p><p>标签：Tools,Mac</p><p>Mac 的 menu bar 小工具，拯救因刘海屏显示不下的小图标。之前用过 Hidden。但 Hidden 展开后对被刘海挡住的部分还是无能为力。而 Ice 则直接把隐藏的图标展示到 menu bar 下面，避免了这个问题。</p><p><img src="https://icemenubar.app/gallery_gen/726e843ac2a8881c562e1bc64c5b560f_fit.svg"></p><p><strong>2、<a href="https://inputsource.pro/zh-CN">Input Source Pro</a>[^2]</strong></p><p>标签：Tools,Mac</p><p>当前输入法提示的小工具，还可以定制 APP 的默认输入法。对于工作时在 Teams 和编辑器之间来回切换很有用。</p><p><img src="https://inputsource.pro/img/illustration.jpg?1736741258334"></p><p><strong>3、<a href="https://slea.ai/zh-CN">用Slea.ai免费AI Logo生成器轻松创建专业Logo</a>[^5]</strong></p><p>标签：Tools</p><p>免费生成 AI Logo 的工具网站。对不擅长设计的开发者会有所帮助。</p><p><img src="https://slea.ai/logo.png"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://tomekdev.com/posts/benchmarking-graphql-solutions-in-the-js-ts-landscape">Benchmarking GraphQL solutions in the JS&#x2F;TS landscape</a>[^3]</strong></p><p>标签：JavaScript,Node.js,GraphQL</p><p>针对 GraphQL 在不同的 Node.js 运行时（Node、Bun、Deno）和不同框架（Nest、Fastify、Express）下的性能测试。作者详细列举了 GraphQL 的技术栈、框架的选择以及测试方式。</p><p>结论：<br>按照 NestJS 教程搭建的 GraphQL Server 的性能最差。<br>Fastify + mercurius + graphql-jit 在 Node.js 的运行时下的组合性能最佳，并且解析器对性能的影响十分严重，能降低 80% 性能。只有必要时才应该开启。</p><p><img src="https://tomekdev.com/static/cce89cde80553304bfcd2a589fef4595/012-graphql-benchmarks.png"></p><p><strong>2、<a href="https://blog.logto.io/css-only-infinite-scroll">CSS-only infinite scrolling carousel animation · Logto blog</a>[^6]</strong></p><p>标签：CSS,前端</p><p>纯 CSS 实现的无限滚动效果，支持鼠标悬浮暂停。通过 Flex + animation 组合实现。文章讲的很好，一步一步配合示例代码十分易懂。感兴趣的小伙伴可以看看。现代 CSS 比起当年做前端时能做的太多了。</p><p><img src="https://uploads.strapi.logto.io/2/css_only_animation_infinite_scrolling_carousel_9a669693ab.webp"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://1q43.blog/post/10851/">胖东来是非学不可了 | 虹线</a>[^4]</strong></p><p>标签：思考</p><p>从另一个角度分析了胖东来出圈的原因。重点讲了胖东来是如何成为“神话”的原因。时代的变化凸显了胖东来的存在，有一种潮水褪去后的感觉。</p><blockquote><p>胖东来模式在上一个时代是不合时宜的，它更像是下一个时代的最优解，即宏观存量市场下的微观无杠杆经营。</p><p>在上一个时代，注定了不用杠杆打不过用杠杆的，毕竟无论是拿地、选品还是招聘，你的竞争对手只要想都能以无视经济规律，“不计商业成本”的方式与你竞争。</p><p> 但在下一个去杠杆时代，一切都会反转，不用杠杆能活下来是第一位，能经营好则能胜出。这才是胖东来“优秀了20年”，这么晚才“出圈”的原因。</p></blockquote><p>分析的很有意思，值得详细一读。</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Ice - Menu Bar Manager: <a href="https://icemenubar.app/">https://icemenubar.app/</a></li><li>[2] Input Source Pro: <a href="https://inputsource.pro/zh-CN">https://inputsource.pro/zh-CN</a></li><li>[3] Benchmarking GraphQL solutions in the JS&#x2F;TS landscape: <a href="https://tomekdev.com/posts/benchmarking-graphql-solutions-in-the-js-ts-landscape">https://tomekdev.com/posts/benchmarking-graphql-solutions-in-the-js-ts-landscape</a></li><li>[4] 胖东来是非学不可了 | 虹线: <a href="https://1q43.blog/post/10851/">https://1q43.blog/post/10851/</a></li><li>[5] 用Slea.ai免费AI Logo生成器轻松创建专业Logo: <a href="https://slea.ai/zh-CN">https://slea.ai/zh-CN</a></li><li>[6] CSS-only infinite scrolling carousel animation · Logto blog: <a href="https://blog.logto.io/css-only-infinite-scroll">https://blog.logto.io/css-only-infinite-scroll</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-05 - 2025-01-12</title>
    <link href="/weekly/2025/01/12/01-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250105_20250112/"/>
    <url>/weekly/2025/01/12/01-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250105_20250112/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-05 - 2025-01-12</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.v2ex.com/t/1102126">我是如何从零开始手搓一个独立游戏并上架 Steam 的 - V2EX</a>[^1]</strong></p><p>标签：Life,励志</p><p>讲述了作者历经 5 年制作独立游戏《中国式加班》的完整过程。<br>包括了构思和规划、美术、引擎选型、剧本构思。中途一度因资源不足夭折，最后又借助 AI 完成第一版并成功上架 Steam。</p><p>非常佩服作者的坚持。AI 降低了门槛，让很多事情变得可能。特别赞同完成比完美更重要这一点。过早追求完美，反而可能是最大的阻力。值得细细阅读。</p><p><img src="https://hhacker.com/wp-content/uploads/2025/01/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-01-221738.png"></p><p><strong>2、<a href="https://sspai.com/post/86260">万字干货！手把手带你根除手机&amp;短视频成瘾？ - 少数派</a>[^2]</strong></p><p>标签：自律,时间管理</p><p>我自己应该是有些手机依赖的，感觉自己能静下心做事的时间变短了。为此我打开了屏幕时间功能，某站在使用时间上确实独占鳌头。这篇文章有点长，但是讲的很详细。快消或者奶头乐通过不断地刺激会逐渐封锁认知，消磨掉我们的“有效时间”。</p><p>其中内因可以分为无聊成瘾以及放松成瘾；外因则是推荐算法。两者加持下提高对刺激的阈值，从而逐渐成瘾。类似一刀切的强行对抗，不仅需要强大的意志力而且也不能从根本上解决问题。</p><p>作者提出将日程排满以及通过引入更多好的习惯来“冲淡”刷视频的习惯，似乎比较可行。打算试着尝试一下。</p><p><img src="https://cdnfile.sspai.com/2024/02/02/article/4b718cfa0cbb0ca738087f48d106e3e8?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p><strong>3、<a href="https://wukan.me/?p=2649">四年五个月 – 阿倫的孤獨星球</a>[^4]</strong></p><p>标签：Life,工作</p><p>讲述了作者 4 年 5 个月的时间分别在国内与国外的工作经历（都是在外企）。对比了两边的生活体验以及对产品的看法和技术氛围。有种“一方水土养一方人”的感觉。<br>国内对领导的心理按摩是造成卷的原因之一，而这背后也体现了对员工个体的尊重与信任。</p><p><img src="https://wukan.me/wp-content/uploads/2024/12/DALL%C2%B7E-2024-12-10-23.19.16-A-highly-minimalistic-and-abstract-illustration-symbolizing-the-contrast-between-two-work-cultures-formatted-in-a-16_9-aspect-ratio.-The-image-featur-768x439.webp"></p><p><strong>4、<a href="https://sspai.com/post/95152">2024年的大环境下；开了个副业淘宝店的过程记录与阶段性感悟 - 少数派</a>[^6]</strong></p><p>标签：Life,副业</p><p>被标题吸引，读完发现很有意思。<br>作者详细讲述了自己开淘宝店作为副业的过程。包括了开店、引流、定价、客服等。没有噱头，全是作者的感受。实打实的细节和干货，非常值得一读。<br>看完最深的感受是一个店背后各种事务真的很复杂。除了自己要有渠道和相应的知识外，其他的事情也很多。</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/44cb6954-457a-4a64-b86e-85f433992a93/f6f89fe3-fe5e-4211-ae67-9810d82f1604/stn-LrT5834M7sDxQdgk89aT6GgoFHU1j0Q6kStFGmvb.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250112/us-west-2/s3/aws4_request&X-Amz-Date=20250112T150138Z&X-Amz-Expires=3600&X-Amz-Signature=282cc1b30235780f60709c64defd13c073ccdd032e026ddf0aef12d79e95b6b4&X-Amz-SignedHeaders=host&x-id=GetObject"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://www.ppbzy.com/">泡泡白噪音-倾听下雨的声音</a>[^3]</strong></p><p>标签：Tools</p><p>白噪音的工具网站。自带一个番茄钟和电子木鱼（笑）。最近休息在家的时候，有点没法集中，尝试一下。有预设好的模式，可以直接使用。</p><p><img src="/weekly/images/2025/ppbzy.webp"></p><p><strong>2、<a href="https://weiyen.net/articles/useful-macos-cmd-line-utilities/">Useful built-in macOS command-line utilities</a>[^5]</strong></p><p>标签：Mac</p><p>介绍了一些 Mac 内置的终端命令。我觉得比较有用的是下面几个命令，可以不用再去网上找在线工具了。</p><ol><li>查看日期的 date 命令。</li><li>生成 UUID 的 uuidgen 。</li><li>剪切板相关命令 pbcopy 和 pbpaste 。</li></ol><p><img src="https://weiyen.net/articles/useful-macos-cmd-line-utilities/oggraph.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 我是如何从零开始手搓一个独立游戏并上架 Steam 的 - V2EX: <a href="https://www.v2ex.com/t/1102126">https://www.v2ex.com/t/1102126</a></li><li>[2] 万字干货！手把手带你根除手机&amp;短视频成瘾？ - 少数派: <a href="https://sspai.com/post/86260">https://sspai.com/post/86260</a></li><li>[3] 泡泡白噪音-倾听下雨的声音: <a href="https://www.ppbzy.com/">https://www.ppbzy.com/</a></li><li>[4] 四年五个月 – 阿倫的孤獨星球: <a href="https://wukan.me/?p=2649">https://wukan.me/?p=2649</a></li><li>[5] Useful built-in macOS command-line utilities: <a href="https://weiyen.net/articles/useful-macos-cmd-line-utilities/">https://weiyen.net/articles/useful-macos-cmd-line-utilities/</a></li><li>[6] 2024年的大环境下；开了个副业淘宝店的过程记录与阶段性感悟 - 少数派: <a href="https://sspai.com/post/95152">https://sspai.com/post/95152</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
