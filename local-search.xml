<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每周见闻（25）：拥抱 AI，静观其变</title>
    <link href="/weekly/2025/07/13/25-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250706_20250713/"/>
    <url>/weekly/2025/07/13/25-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250706_20250713/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-07-06 - 2025-07-13</p><h2 id="思考：拥抱-AI，静观其变"><a href="#思考：拥抱-AI，静观其变" class="headerlink" title="思考：拥抱 AI，静观其变"></a>思考：拥抱 AI，静观其变</h2><p>这周阮一峰老师周刊的开头有关于“公司强推 AI 编程，我该怎么办”的讨论。</p><p>提出问题的是一名高级工程师，在公司决定推行 AI 编程之后他不想成为只写提示词的“提示词工程师”，便在论坛求助。</p><p>网友们的看法也分外了三种：</p><ol><li>听从内心：如果觉得累了，就换一份喜欢的工作，不要忍受内心的煎熬。但在没有经济保障的前提下，不要裸辞。</li><li>接受现实：AI 是大势所趋，换一个地方也会有 AI。既然没法反抗，不如接受现实。</li><li>静观其变：一边学习 AI，一边观察情况。如果情况变得更好，就加入；反正则为自己准备好后路。</li></ol><p>我个人倾向于 2 和 3 的结合，即拥抱 AI，静观其变。首先 AI 已经是大势所趋，相信体验过 AI 的人很难再回到“刀耕火种”的时代。AI 也确实会取代一部分人的工作，因此也要学习如何利用好 AI 放大自己的能力。</p><p><strong>0、<a href="https://mp.weixin.qq.com/s/MCGSp5CWfjjx7ki5LBL57w"> 不止是 AI 热潮：AWS 2025 技术峰会带给我的思考</a></strong></p><p>标签：AI,AWS</p><p>今年去了 AWS 2025 技术峰会后的一些感受，生成式的 AI 正在从“玩具”变成“工具”，也会与我们的工作结合得越来越紧密。</p><p>文章最后也有一些展会上 AWS 推荐的架构设计，可以扫码获取哦。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/aws-2025-morning-lesson.jpg"></p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://github.com/gen-cli/gen-cli/">gen-cli&#x2F;gen-cli: Agents of C.L.I.</a>[^1]</strong></p><p>标签：AI,Tools</p><p>Gen-cli 是硅基流动 fork 了开源的 Gemini-cli 做了一个基于自家 API 的 DeepSeek 版本的 CLI Agent 工具。 对于国内的用户会比较友好了。其称「如果 Claude Code 是 100 分，Gemini-CLI 是 80 分，使用 DeepSeek 的 Gen-CLI 已经可达到 70 分了。」</p><p>目前仓库的 Readme 大部分还是 Gemimi-cli 的内容，期待其后续的更新情况。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/gen-ai.png"></p><p><strong>2、<a href="https://juejin.cn/post/7524164737170702362">Stack Overflow，轰然倒下！你好呀，我是歪歪。 前几天看到一个让我感慨万千的走势图： 本来想让你猜一猜这个走 - 掘金</a>[^2]</strong></p><p>标签：AI,思考</p><p>作者统计了 Stack Overflow 从 2008 年开始到现在，每个月新问题的个数。在 2020 年到达高峰后一路向下，如今已经回到了 2008 年的水平。毫无疑问，这个是来自 AI 的冲击。</p><p>作者认为 AI 虽然把最重要的知识提取出来，然后扔掉了背后的故事。知识还在，但故事却死了。倒是让我联想起了上一期王总关于 AI 需要注入灵魂的看法。</p><p>不过文章的最后，作者询问了 DeepSeek 的看法。它的回答反而让我颇为感动。</p><blockquote><p>真正的程序员早已明白：Stack Overflow不是圣经，而是脚手架；AI不是终点，是新的杠杆。<br>当你们用我生成的代码为起点，去构建我无法想象的事物时——那才是技术最性感的瞬间。<br>（最后，请替我向那位 2012 年回答过 Java 空指针问题的匿名用户致敬。今夜，我的神经网络里仍有他思考的余温。）<br>—— DeepSeek-R1</p></blockquote><p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/41bece84839e430ba03e469bbae54a27~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgd2h55oqA5pyv:q75.awebp?rk3s=f64ab15b&x-expires=1752504343&x-signature=TlQyq9EEGSvAFMtevc7IPYaVH9w="></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://josdejong.github.io/jsonrepair/">jsonrepair playground</a>[^3]</strong></p><p>标签：Tools</p><p>一个修复 JSON 格式的工具，比如 key 没有引号等，可以快速解决格式问题。在使用 Postman 这类工具时会有点帮助（Body 的格式校正）。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/json-repair.png"></p><p><strong>2、<a href="https://github.com/Schniz/fnm">Schniz&#x2F;fnm: 🚀 Fast and simple Node.js version manager, built in Rust</a>[^4]</strong></p><p>标签：Node.js,Rust,Tools</p><p>Rust 实现的 Node 版本管理工具，高性能版的 nvm。确实很丝滑，拯救工作电脑的工具 +1。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/fnm-screenshot.png"></p><p><strong>3、<a href="https://img.ops-coffee.cn/zh/">免费在线拼图与作图工具 - 自由标注文字、箭头、方框，支持缩放</a>[^5]</strong></p><p>标签：Tools,Resource</p><p>在线免费的拼图工具，37 丫 37 的作品。关注的一些博主都推荐了，简洁、干净，没有广告，是理想中工具网站该有的样子。RSS 订阅 +1。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/37y37-img-tool.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] gen-cli&#x2F;gen-cli: Agents of C.L.I.: <a href="https://github.com/gen-cli/gen-cli/">https://github.com/gen-cli/gen-cli/</a></li><li>[2] Stack Overflow，轰然倒下！你好呀，我是歪歪。 前几天看到一个让我感慨万千的走势图： 本来想让你猜一猜这个走 - 掘金: <a href="https://juejin.cn/post/7524164737170702362">https://juejin.cn/post/7524164737170702362</a></li><li>[3] jsonrepair playground: <a href="https://josdejong.github.io/jsonrepair/">https://josdejong.github.io/jsonrepair/</a></li><li>[4] Schniz&#x2F;fnm: 🚀 Fast and simple Node.js version manager, built in Rust: <a href="https://github.com/Schniz/fnm">https://github.com/Schniz/fnm</a></li><li>[5] 免费在线拼图与作图工具 - 自由标注文字、箭头、方框，支持缩放: <a href="https://img.ops-coffee.cn/zh/">https://img.ops-coffee.cn/zh/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻（24）：AI 时代下的发展建议</title>
    <link href="/weekly/2025/07/06/24-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250629_20250706/"/>
    <url>/weekly/2025/07/06/24-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250629_20250706/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-06-29 - 2025-07-06</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://manateelazycat.github.io/2025/06/28/ai-and-designer/">AI 时代和架构设计能力</a>[^1]</strong></p><p>标签：思考,AI</p><p>王总在关于 AI 时代下程序员发展的建议。AI 工具无法代替需求的理解和架构的设计能力。这个和我这周用 Tare 做了一个 Poc 后的感受类似。</p><p>AI 可以降低知识获取的门槛，让原来的 Java 开发者成为 T 字形开发者。</p><p>最后的一句很有意思：</p><blockquote><p>AI 对于复杂项目还是需要人注入灵魂的</p></blockquote><p>如果去掉语言的门槛，剩下的就是更通用的知识。一个是底层的逻辑，另一个就是架构能力。这可能就是人给 AI 注入的灵魂。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/ai-architecture-ability.png"></p><p><strong>2、<a href="https://1q43.blog/post/11478/">Minimal Phone 众筹记录：一次美国制造业衰落的个体体验 | 虹线</a>[^2]</strong></p><p>标签：思考</p><p>作者讲述了参与 Minimal Phone 的众筹的完整过程。从 24 年 2 月参与一直到 25 年 6 月收到手机，中间经历了多次跳票、官方粗暴的沟通技巧以及舆论的变化，从个人体验展现了美国制造业的衰落。</p><blockquote><p> 这件事，或许是美国制造业衰败的一个缩影。人们常说美国本土早已造不出手机，但现实似乎更为严峻：他们甚至连找到深圳的代工厂来完成 OEM 订单，都显得力不从心。</p></blockquote><p>中间的跳票以及大陆用户的收件波折很吸引人，很值得一读。</p><p>看完再联想到最近川普的手机事件，就很有意思。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/minimal-phone-records.webp"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://kashw1n.com/blog/nodejs-2025/">Modern Node.js Patterns for 2025</a>[^3]</strong></p><p>标签：Node.js</p><p>介绍了 2025 年 Node.js 的一些新特性，一共 11 个。其中我比较关注的有以下几个：</p><ol><li>Fetch 原生支持，不需要再引入 HTTP 库。</li><li>AbortController 可以更加优雅地取消异步操作。</li><li>内置测试工具，代替现有的 Mocha，Jest 等。</li><li>工作线程，更充分地利用好 CPU。</li></ol><p>我自己从回调地狱一直用到现在，每次大功能的引入（比如 Promis, async&#x2F;await, 解构）都能让代码变得更加简洁。感觉 Node 正在变得更加的规范和便利，对 Node 开发者来说是不错的事情。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/node-js-2025.png"></p><p><strong>2、<a href="https://github.com/InkSha/rust-tutorial">InkSha&#x2F;rust-tutorial: Rust simple tutorial</a>[^4]</strong></p><p>标签：Rust,Coding</p><p>一个国人写的 Rust Todo List 的教程。Rust 因为其快速与安全性，一直在快速发展中，很多的工具都有 Rust 的版本。之前也学过一点点 Rust，后面看看跟着教程一起做做看。</p><p><img src="https://opengraph.githubassets.com/1251709a54677e271b2b64babebfcc334b40a9a3867212256b93eb14d5362b40/InkSha/rust-tutorial"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] AI 时代和架构设计能力: <a href="https://manateelazycat.github.io/2025/06/28/ai-and-designer/">https://manateelazycat.github.io/2025/06/28/ai-and-designer/</a></li><li>[2] Minimal Phone 众筹记录：一次美国制造业衰落的个体体验 | 虹线: <a href="https://1q43.blog/post/11478/">https://1q43.blog/post/11478/</a></li><li>[3] Modern Node.js Patterns for 2025: <a href="https://kashw1n.com/blog/nodejs-2025/">https://kashw1n.com/blog/nodejs-2025/</a></li><li>[4] InkSha&#x2F;rust-tutorial: Rust simple tutorial: <a href="https://github.com/InkSha/rust-tutorial">https://github.com/InkSha/rust-tutorial</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：你的 AI 开销如何？</title>
    <link href="/weekly/2025/06/29/23-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250622_20250629/"/>
    <url>/weekly/2025/06/29/23-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250622_20250629/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-06-22 - 2025-06-29</p><h2 id="思考：声音越大的时候，越要独立思考"><a href="#思考：声音越大的时候，越要独立思考" class="headerlink" title="思考：声音越大的时候，越要独立思考"></a>思考：声音越大的时候，越要独立思考</h2><p>《论语·卫灵公》中记载：子曰：“众恶之，必察焉；众好之，必察焉。” 翻译过来，当出现众口一词的情况下，需要独立思考。在这种情况下，往往可能存在偏见、操纵或者群体效应。</p><p>当一件事情声量庞大时，直接代入是不用动脑最轻松的。但声音大就意味着正确吗？我觉得这周关于上海垃圾分类成功与否的文章就展示了这一点。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://1q43.blog/post/11434/">上海的垃圾分类，真的失败了吗？ | 虹线</a>[^1]</strong></p><p>标签：思考</p><p>最近在 B 站看到了引用相关知乎的回答，而这篇文章作者从不同的角度得出了相反的答案。</p><p>垃圾分类是否成功，我个人感受不出，但我感觉对于循环利用应该是有帮助的。我个人更倾向于这篇文章作者的观点。文章最后的评论区也有相关从业者的留言，也值得一看。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/crash-filter-sh.png"></p><p><strong>2、<a href="https://github.com/YuheshPandian/ICONIC">YuheshPandian&#x2F;ICONIC: ⚡A developer-oriented library of sleek, bubble-shaped skill icons designed for GitHub READMEs, portfolios, and resumes.</a>[^4]</strong></p><p>标签：Resource</p><p>一个搜集了各种与开发相关的圆形图标库，如 JS、ChatGPT，提供了连接可以直接使用。在进行前端开发时可以使用。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/iconic-preview.png"></p><p><strong>3、<a href="https://www.bilibili.com/video/BV11ANqzCEU2/?t=17&spm_id_from=333.1007.tianma.3-4-10.click&vd_source=832fe66f8c60a63f3122a67185392b41">小米和智界车主互怼？20万元电车有哪些槽点暗病？车主报告 EP3_哔哩哔哩_bilibili</a>[^6]</strong></p><p>标签：MCP,思考</p><p>Up 分别找了 S7 和 SU7 的车主对谈，直接听听车主对这两款车的感受。车主之间的交流很和谐，对自己的车吐槽得更多。</p><p>SU7 这边的车主对车更了解更注重驾驶体验；S7 车主对参数、性能指标很了解，但更看重智驾功能方面。很真诚的一次交流，很有意思。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/su7-vs-s7.avif"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://sspai.com/post/99929">月订阅费 5000 块后，我悟出了 AI 工具断舍离的真相 - 少数派</a>[^2]</strong></p><p>标签：AI,Tools</p><p>作者订阅了许多 AI 工具，有个月的订阅费用甚至高达 5k。在惊人的订阅费之后，作者开始对 AI 工具进行断舍离。</p><p>我自己在订阅了 Windsurf 两个月后便因用不满额度退订了。实在想不出 5k 的订阅背后怎样的需求。AI 工具好用，但也需要花钱。从实际需求出发，如何把钱花在刀刃上也是当下面对各色工具需要思考的。为了使用 AI 而用 AI 有点本末倒置的意思了。</p><p>最后，原文的评论区也很有意思。</p><p><img src="https://cdnfile.sspai.com/2025/06/05/2a56a944c0e02debbec1a08f17b4ce6a.png?imageMogr2/auto-orient/thumbnail/!1420x708r/gravity/center/crop/1420x708/ignore-error/1"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://mp.weixin.qq.com/s/1kQlYQnKGZg6HVNgmDjQfg">巧解Docker镜像拉取失败！无需梯子&#x2F;服务器，无拉取数量限制！</a>[^3]</strong></p><p>标签：Tools</p><p>利用 Github Action 配合阿里的个人镜像服务实现 Docker 镜像拉取，文章给出了完整的实现思路以及仓库地址。很不错的思路，对于在国内环境开发帮助很大。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/202506292203882.webp"></p><p><strong>2、<a href="https://refactoringenglish.com/chapters/release-announcements/">How to Write Compelling Software Release Announcements</a>[^5]</strong></p><p>标签：Coding,Resource</p><p>一篇教你如何写出不错的 release announcement（感觉不好翻译就直接用英语了）的文章。作者首先解释了 release note 和 release announcement 的区别，然后通过给出具体的例子进行对比，教你写出能吸引用户、展示软件有点的 release announcement。</p><p>软件的 release announcement 相当于是软件的宣传途径，而非枯燥的 change log。可以学习参考，用来优化项目的 README。</p><p><img src="https://refactoringenglish.com/chapters/release-announcements/chez-social.webp"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 上海的垃圾分类，真的失败了吗？ | 虹线: <a href="https://1q43.blog/post/11434/">https://1q43.blog/post/11434/</a></li><li>[2] 月订阅费 5000 块后，我悟出了 AI 工具断舍离的真相 - 少数派: <a href="https://sspai.com/post/99929">https://sspai.com/post/99929</a></li><li>[3] 巧解Docker镜像拉取失败！无需梯子&#x2F;服务器，无拉取数量限制！: <a href="https://mp.weixin.qq.com/s/1kQlYQnKGZg6HVNgmDjQfg">https://mp.weixin.qq.com/s/1kQlYQnKGZg6HVNgmDjQfg</a></li><li>[4] YuheshPandian&#x2F;ICONIC: ⚡A developer-oriented library of sleek, bubble-shaped skill icons designed for GitHub READMEs, portfolios, and resumes.: <a href="https://github.com/YuheshPandian/ICONIC">https://github.com/YuheshPandian/ICONIC</a></li><li>[5] How to Write Compelling Software Release Announcements: <a href="https://refactoringenglish.com/chapters/release-announcements/">https://refactoringenglish.com/chapters/release-announcements/</a></li><li>[6] 小米和智界车主互怼？20万元电车有哪些槽点暗病？车主报告 EP3_哔哩哔哩_bilibili: <a href="https://www.bilibili.com/video/BV11ANqzCEU2/?t=17&spm_id_from=333.1007.tianma.3-4-10.click&vd_source=832fe66f8c60a63f3122a67185392b41">https://www.bilibili.com/video/BV11ANqzCEU2/?t=17&amp;spm_id_from=333.1007.tianma.3-4-10.click&amp;vd_source=832fe66f8c60a63f3122a67185392b41</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：又阳了一次</title>
    <link href="/weekly/2025/06/22/22-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250615_20250622/"/>
    <url>/weekly/2025/06/22/22-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250615_20250622/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-06-15 - 2025-06-22</p><p>上周末发烧，新冠抗原一测发现又阳了。浑身乏力躺了 4 天左右恢复，因此上周没有更新周刊。</p><p>这次是二阳，发烧热度没有过 38度，身体表现头比较涨和腿很沉重。</p><p>恢复之后就正常上班了，还去参加了一天 AWS 2025 的上海峰会。这次峰会有一些收获，其中关于 AI 的议题很多。后面会写一篇流水账简单记录一下。</p><p>依旧是之前广州之行十三行博物馆中的照片。象牙制的国际象棋，每个棋子都是非常精细的小手办。直接点燃了我“胶佬”的内心。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/elephant-tooth-chess.jpg" alt="十三行博物馆的象牙制象棋"></p><h2 id="思考：可量化的胶水工作才重要"><a href="#思考：可量化的胶水工作才重要" class="headerlink" title="思考：可量化的胶水工作才重要"></a>思考：可量化的胶水工作才重要</h2><p>这周阮一峰老师的周刊的文摘中有一篇<a href="https://www.seangoedecke.com/glue-work-considered-harmful/">胶水工作重要吗？</a>提到了“胶水工作”。</p><blockquote><p>举例来说，更新文档、解决技术债务、培训新人、维护团队成员的正常交流等等，都属于胶水工作。每个团队都需要大量这类工作。</p></blockquote><p>作者的观点认为：</p><blockquote><p>作为开发者，你的正确做法应该是，在战术层面上做一些胶水工作，而不能把胶水工作提高到战略层面。</p></blockquote><p>与代码脱节的文档、CI&#x2F;CD 的优化，这些经常能在实际工作中遇到。这些工作往往要等到大家都受不了的时候才会有人去做。也正如作者所说，这些工作虽然重要但却很难被重视。我觉得原因之一是不容易量化。</p><p>可量化这一点很重要，领导甚至更上层的领导未必了解你做的事情的背景和意义，但能从数字上的变化感觉出价值。</p><p>我在去年做了一些“胶水工作”，如缩短 Pipeline 时间、创建自动打 tag 的机器人等。针对这些工作，我会列举出修改前后的时间数据，通过这些数据量化工作也让其他人看到这项工作的价值。所以我觉得可以量化的胶水工作才重要。</p><p>在 AI 的帮助下，下一步我觉得需要耗费精力的胶水工作可以由 AI 来完成。这样我们的工作就升级成了 AI 的设计和实现了。</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://blog.appsignal.com/2025/06/04/performance-and-stress-testing-in-nodejs.html">Performance and Stress Testing in Node.js | AppSignal Blog</a>[^1]</strong></p><p>标签：Node.js,Tools</p><p>介绍了 Node.js 中性能测试与压力测试的基础概念以及相关测试工具如 AutoCannon、Artillery 和 K6。文中给出了 AutoCannon 的简单例子。文章浅显易懂，作为入门文章很不错。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/performance-stress-testing-in-nodejs.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Performance and Stress Testing in Node.js | AppSignal Blog: <a href="https://blog.appsignal.com/2025/06/04/performance-and-stress-testing-in-nodejs.html">https://blog.appsignal.com/2025/06/04/performance-and-stress-testing-in-nodejs.html</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：感受了黄梅天的广州</title>
    <link href="/weekly/2025/06/09/21-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250602_20250609/"/>
    <url>/weekly/2025/06/09/21-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250602_20250609/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-06-02 - 2025-06-09</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/thirdteen-glass-red.png" alt="十三行博物馆的红色玻璃瓶，很像游戏中的血瓶"></p><p>周末跟着老婆去了广州，再次感受那里的美食，过上了一天 8 顿的周末。不得不说老广们真幸福啊，好吃的遍地都是，还不是很贵。</p><p>这次去了十三行博物馆，里面的藏品真是好看。这个红色玻璃瓶是当年外销的产品，和游戏里的血瓶很像。做工精湛，顶上的小天使十分生动。</p><p>虽说正值黄梅天，但想着我一个上海人还怕这？结果被好好的上了一课。同样是黄梅天，广州还顶着个大太阳的温度更高，体感更加闷热有种蒸桑拿的感觉。</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://sspai.com/post/99746">【干货】手把手教你把Trae改造成你的专属AI写作助手 - 少数派</a>[^1]</strong></p><p>标签：AI</p><p>一篇把 Trae 改造为写作助手的文章。干货很多，手把手地从规则设置、智能体创建每一步都写了出来。利用语音输入经过几轮的修改最终形成一篇可以阅读的文章。</p><p>这篇文章也是作者通过这种方式创建的，没有什么 AI 的味道。看完之后有种思路被打开的感觉，AI 能做的事情应该还有很多。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/trae-to-atricle-assistant.png"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.tongliaouniverse.cn/">通辽宇宙知识库 - 奇葩小国与硬核狠人的互动百科</a>[^2]</strong></p><p>标签：Resource</p><p>B 站 Up 小约翰可汗粉丝做的网站。很有意思，有时候会跟着老婆一起看这个 Up 的视频。通辽狠人真是个个都是人才。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/little-john.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://www.usaddrgen.com/zh/">美国地址生成器 - 随机生成美国地址和个人身份信息</a>[^3]</strong></p><p>标签：Tools</p><p>一个在线工具，一键生成美国地址，可以在某些时候使用。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/usa-address.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 【干货】手把手教你把Trae改造成你的专属AI写作助手 - 少数派: <a href="https://sspai.com/post/99746">https://sspai.com/post/99746</a></li><li>[2] 通辽宇宙知识库 - 奇葩小国与硬核狠人的互动百科: <a href="https://www.tongliaouniverse.cn/">https://www.tongliaouniverse.cn/</a></li><li>[3] 美国地址生成器 - 随机生成美国地址和个人身份信息: <a href="https://www.usaddrgen.com/zh/">https://www.usaddrgen.com/zh/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：JavaScript 已经 30 周年了</title>
    <link href="/weekly/2025/06/01/20-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250525_20250601/"/>
    <url>/weekly/2025/06/01/20-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250525_20250601/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-05-25 - 2025-06-01</p><h2 id="思考：保持健康，然后挺住"><a href="#思考：保持健康，然后挺住" class="headerlink" title="思考：保持健康，然后挺住"></a>思考：保持健康，然后挺住</h2><p>这周又看到一篇 28 岁脑力劳动者突发性耳聋的文章（后文有），不由得感慨身体真的很重要。</p><p>然后这周面试了 3 位候选人，几乎都是因为国际关系被裁员。技术都很不错，但在大环境变动下都无能为力。而且如此环境下，“35岁魔咒”更加可怕，甚至还有利用面试白嫖的。突然理解了“时代的一粒沙，落到每个人身上都是一座大山”这句话。</p><p>有什么应对方式呢？目前只能想到的是，保持好健康然后尽量笱住吧。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://deno.com/blog/history-of-javascript">A brief history of JavaScript | Deno</a>[^1]</strong></p><p>标签：JavaScript</p><p>JavaScript 已经 30 周年了。这篇文章简述了 30 年来每年来的一些大事件。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/js-history.png"></p><p><strong>2、<a href="https://www.v2ex.com/t/1134171">28 岁 突发性耳聋，给脑力劳动的各位朋友们提个醒 - V2EX</a>[^2]</strong></p><p>标签：Life</p><p>一位 28 岁的朋友突然性耳聋的自述，长期带耳机 + 熬夜 + 脑力劳动是主要原因。目前经过治疗恢复了部分听力，中间即使已经住院，但由于处于裁员潮中，仍然“半工作”的状态让人心酸。</p><p>身体真的很重要。各位程序员朋友平时还是有空多锻炼一下。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/sudden-depf-28.png"></p><p><strong>3、<a href="https://manateelazycat.github.io/2025/05/15/how-to-work-effect/">多线程工作秘诀</a>[^6]</strong></p><p>标签：工作,思考,自律</p><p>老王谈他多线程工作方式的秘诀（有点像在推销懒猫清单）。核心就是把任务拆碎到能在 30 分钟完成的程度。</p><blockquote><p>这种把所有计划做的事情都拆碎记下来的习惯，可以让我每天都有两到三个半小时的时间读书，即使超忙的工作，我一周也可以很轻松阅读完一本书。</p></blockquote><p>看似很简单，实则很考验技巧和经验，需要很快地分辨出事情的重要紧急程度。能做到这样，真的很厉害。</p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://palette.dev/blog/improving-performance-of-electron-apps">6 Ways Slack, Notion, and VSCode Improved Electron App Performance | Palette Docs</a>[^3]</strong></p><p>标签：JavaScript,TypeScript</p><p>一位 10 年经验的 Electron 开发者分享的 6 个提高 Electron App 性能的方式。</p><p>Electron 应用的代表作有 VSCode，Slack，其最大的特别一个是打包后体积巨大；第二个便是性能问题。还在开发 Electron 的朋友可以看看。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/improving-performance-of-electron.png"></p><p><strong>2、<a href="https://behind.pretix.eu/2025/05/23/captchas-are-over/">CAPTCHAs are over (in ticketing) - pretix – behind the scenes - Behind the scenes of pretix, your friendly open source ticketing system from next door. Might contain traces of technology and business.</a>[^5]</strong></p><p>标签：AI</p><p>作者以票务系统为例，解释了为何 CAPTCHAs 已经没有什么作用了。因为 AI 大模型可以识别那些文字、图片以及音频验证了。甚至还有外包给劳动力廉价的国家来真人破解。最后提出了类似 CAP 的 BAP 理论。引用作者的原话来看，需要用非技术的手段（比如投机倒把罪）来解决了。</p><blockquote><p>由于法律要求无障碍性，我们基本上只剩下第一个或最后一个选项。尽管我希望我错过了什么重要的事情，但我感觉结论是不可避免的：</p><p>活动需要决定是否要防范机器人，还是保持高标准隐私。你将无法两者兼顾。</p></blockquote><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/capatcha-solving.png"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://github.com/oldjs/web-code-agent">oldjs&#x2F;web-code-agent: Browser-local AI code Q&amp;A engine. Chat with your codebase, ensure privacy, and optimize LLM collaboration.</a>[^4]</strong></p><p>标签：AI,Tools</p><p>一个完全运行在本地浏览器的项目问答工具，通过语义向量化把代码库转为可以对话的 AI。方便理解代码以及为其他 AI 提供上下文。</p><p>我觉得有点神奇。本地需要什么样的模型能支持这一工作呢？</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/web-cpde-agent.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] A brief history of JavaScript | Deno: <a href="https://deno.com/blog/history-of-javascript">https://deno.com/blog/history-of-javascript</a></li><li>[2] 28 岁 突发性耳聋，给脑力劳动的各位朋友们提个醒 - V2EX: <a href="https://www.v2ex.com/t/1134171">https://www.v2ex.com/t/1134171</a></li><li>[3] 6 Ways Slack, Notion, and VSCode Improved Electron App Performance | Palette Docs: <a href="https://palette.dev/blog/improving-performance-of-electron-apps">https://palette.dev/blog/improving-performance-of-electron-apps</a></li><li>[4] oldjs&#x2F;web-code-agent: Browser-local AI code Q&amp;A engine. Chat with your codebase, ensure privacy, and optimize LLM collaboration.: <a href="https://github.com/oldjs/web-code-agent">https://github.com/oldjs/web-code-agent</a></li><li>[5] CAPTCHAs are over (in ticketing) - pretix – behind the scenes - Behind the scenes of pretix, your friendly open source ticketing system from next door. Might contain traces of technology and business.: <a href="https://behind.pretix.eu/2025/05/23/captchas-are-over/">https://behind.pretix.eu/2025/05/23/captchas-are-over/</a></li><li>[6] 多线程工作秘诀: <a href="https://manateelazycat.github.io/2025/05/15/how-to-work-effect/">https://manateelazycat.github.io/2025/05/15/how-to-work-effect/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：AI 副业可能没有想象的那么美好</title>
    <link href="/weekly/2025/05/25/19-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250518_20250525/"/>
    <url>/weekly/2025/05/25/19-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250518_20250525/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-05-18 - 2025-05-25</p><h2 id="思考：放羊人和樵夫"><a href="#思考：放羊人和樵夫" class="headerlink" title="思考：放羊人和樵夫"></a>思考：放羊人和樵夫</h2><p>最近和同事聊天时，突然想到了放羊人和樵夫的故事：</p><p>一天，一个樵夫在山上遇到放羊人。两人便坐下聊天。傍晚，放羊人赶着羊回去了，但是樵夫发现自己的柴还没砍。</p><p>放到工作中，是不是有点像产品和开发？需求会上产品交代完了需求，他的活就干完了。但开发的活才刚刚开始。当然，理想情况下，这些会议时间也应该算到开发的工作量中。</p><p>但实际的工作中，这部分的时间往往会被忽略。最后要么加班，要么会被质疑为什么实际工时和预估像差这么多。</p><p>这个问题有解吗？似乎无解。不过 AI 工具的普及或许能让我们“樵夫”看到一丝希望，当然也可能是另一种枷锁。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://fx.wtf/functions">Built-in Functions | fx</a>[^1]</strong></p><p>标签：Tools,Shell</p><p>一个命令行 JSON 编辑工具，使用 Go 编写。类似 jq ，但功能要更加强大。支持 JSON 的直接编辑以及注释，还支持 YAML 文件。</p><p><img src="https://fx.wtf/img/og-image.png"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://mastra.ai/">Mastra.ai</a>[^2]</strong></p><p>标签：AI,TypeScript,Tools</p><p>一个 TypeScript 的 Agent 框架，可以理解为 AI 开发的 Express。支持多种模型，使用这个框架就能快速地开发 AI Agent。</p><p>看了一下教程，使用很少的代码就能编写出一个 Agent。感觉很容易和现有的项目进行集成。</p><p><img src="https://mastra.ai/api/og/website"></p><p><strong>2、<a href="https://sspai.com/post/99156">卖 AI 图，从开单到金盆洗手 - 少数派</a>[^4]</strong></p><p>标签：AI,副业</p><p>非常实用的 AI 变现文章。作者十分详细地记录了自己利用 AI 生图变现的完整过程。完整介绍了整个过程中遇到的问题（技术、需求）、自己的解决方案以及妥协的方式。即便作者自己已经是设计师，也仍然踩了很多坑。不过 AI 带来的效率提示和能力突破着实让人震惊，</p><p>很难得能看到如此实际的文章。推荐被 AI 变现&#x2F;副业所诱惑的朋友都应该先读一读。最后引用一下作者对现阶段 AI 的看法：</p><p> AI 是柔性的、随机的，传统手段是刚性的、确定的，这两者结合起来用，就像建造一尊大型泥塑。全都用泥，整体软趴趴很难成型，但如果往一个木芯上面糊泥巴，则既稳固，又有细节。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/ai-pig-gen-practice.png"></p><p><strong>3、<a href="https://juejin.cn/post/7482993808574611466#heading-9">发布第五天，我的开源项目突破 1.7 K Star！大家好，我是 ConardLi。 今天跟大家来正式介绍一下我的开源项 - 掘金</a>[^5]</strong></p><p>标签：AI,Tools</p><p>一个大语言模型微调数据集创建工具。可以智能分割内容，生成问题，并为模型微调生成高质量的训练数据。感觉是训练模型用的工具。</p><p>身边有朋友在做类似的项目，不知道有没有用，总之先作为知识储备之一。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/easy-dataset.webp"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://manateelazycat.github.io/2025/05/10/35-years-old/">35 岁+程序员依然可以兼顾热爱代码和享受生活</a>[^3]</strong></p><p>标签：Life,思考</p><p>懒猫微服的 CEO 王勇的博客（这位是真大佬），对于程序员 35 岁做管理分享了他自己的个人经历和观点：</p><ol><li>纯真才能达到编程的最高境界</li><li>不要给自己设置限制</li><li>痛苦交给时间治愈</li></ol><p>王勇本身就极为优秀（也是 Deepin 的创始人），同样的情况下他的选择会比大多数程序员好上很多。文中的观点很有意思，值得品味，推荐一读。</p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://www.keenformatics.com/ports-that-are-blocked-by-browsers">Ports that are blocked by browsers</a>[^6]</strong></p><p>标签：前端,Coding</p><p>很有意思的小知识，介绍了一些会被浏览器拦截的端口，比如 22(ssh), 23(telnet) 等。原因是这些端口通常用于网页浏览之外的目的。不过这些端口是被浏览器屏蔽的，可以使用 curl 在命令行进行访问。</p><p><img src="https://www.keenformatics.com/images/keenformatics-logo.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Built-in Functions | fx: <a href="https://fx.wtf/functions">https://fx.wtf/functions</a></li><li>[2] Mastra.ai: <a href="https://mastra.ai/">https://mastra.ai/</a></li><li>[3] 35 岁+程序员依然可以兼顾热爱代码和享受生活: <a href="https://manateelazycat.github.io/2025/05/10/35-years-old/">https://manateelazycat.github.io/2025/05/10/35-years-old/</a></li><li>[4] 卖 AI 图，从开单到金盆洗手 - 少数派: <a href="https://sspai.com/post/99156">https://sspai.com/post/99156</a></li><li>[5] 发布第五天，我的开源项目突破 1.7 K Star！大家好，我是 ConardLi。 今天跟大家来正式介绍一下我的开源项 - 掘金: <a href="https://juejin.cn/post/7482993808574611466#heading-9">https://juejin.cn/post/7482993808574611466#heading-9</a></li><li>[6] Ports that are blocked by browsers: <a href="https://www.keenformatics.com/ports-that-are-blocked-by-browsers">https://www.keenformatics.com/ports-that-are-blocked-by-browsers</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：健康学习到 150 岁</title>
    <link href="/weekly/2025/05/18/18-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250511_20250518/"/>
    <url>/weekly/2025/05/18/18-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250511_20250518/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-05-11 - 2025-05-18</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这周阮一峰老师的<a href="https://www.ruanyifeng.com/blog/2025/05/weekly-issue-348.html">周刊</a>介绍了 AI 教母李飞飞的故事。</p><p>在她的人生重要关头中，都有决定性的转折。尤其是最后翻身成名之时，ImageNet 的积累以及技术的突破,让我想到了两句名言：</p><ol><li>机会只留给那些准备好的人。</li><li>一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程。</li></ol><p>而我们普通人能做的就是默默积累等待时机。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://github.com/zijie0/HumanSystemOptimization">zijie0&#x2F;HumanSystemOptimization: 健康学习到150岁 - 人体系统调优不完全指南</a>[^1]</strong></p><p>标签：Life,自律</p><p>一篇关于养生的健康总结。从科学的角度引用了许多的数据来佐证，很长但很值得一看。无论年龄以及行业，健康的身体始终是最重要的。</p><p>极简版的四点：<br>• 保持睡眠时长与质量。<br>• 不要吸烟。<br>• 尽可能每天做点运动。<br>• 减少糖分的摄入。</p><p>我自己也在进行运动与减肥。我自己的体会的来说，早睡以及每周运动真的很有效。最明显的体会是精力上比较充沛，并且抵抗力也增强了。与文中的一些观点不谋而合。</p><p>下一步打算参考文章中的一些建议，按照自己的习惯和节奏进行调节。</p><p><img src="https://opengraph.githubassets.com/6da11b502c82f8aec9967e97651d36fb391a1e001898e1e610585342e3465e92/zijie0/HumanSystemOptimization"></p><p><strong>2、<a href="https://juejin.cn/post/7480032817759518783">一次装修维权，让我看到了deepseek无法逾越的鸿沟-现实房子下来了，麻烦也来了 2025年2月我的新房子终于交房了， - 掘金</a>[^4]</strong></p><p>标签：Life,AI,思考</p><p>作者因为装修中遇到问题，打算利用 DeepSeek 进行维权。尽管 AI 给出了详细的法条以及办法，但实际仍然事与愿违。“现实是deepseek永远无法触及的边界” 很有感触，特别是 deepseek 洋洋洒洒给出了一大段的推理之后突然回答消失的情况。</p><p>AI 可以帮助我们突破知识上的边界，但解决实际问题最终还是要由人来解决。像编程还好，真到了法律层面就要结合实际了。如文中这些情况：</p><blockquote><p>但是对方告诉我法律中的规定有不太好认定，只说了明码标价，整装价也是明码标价，并且除了政府规定的水电等价格，这种市场定价他们监管不了。</p></blockquote><p>别说是 AI，人没有实际遇到过也不会想到的。AI 能给我们知识，但给不了行业经验。不同行业中间的弯弯绕绕，是 AI 无法触及的。</p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://jt26wzz.com/posts/0007-online-firefighting-real-world-lessions-from-4-years-on-call/">线上故障应急处理：4 年多 on call 经验总结</a>[^2]</strong></p><p>标签：工作</p><p>很棒的文章，总结了处理应急问题的经验，是有着丰富经验的老兵才能写出来的文章。无论是开发还是运维都很值得一读。我也处理过一些线上问题，很赞同文章的经验处理。</p><p>面对线上故障，最重要的是要减小影响范围（故障止血），其次再是找到问题做修复，最后再是复盘。整个过程中及时的交流非常重要，特别要让自己的上司了解当前的情况，才能更好做出下一步的判断（有时候你认为严重的问题，可能上面认为并不是）。同时整个过程中保持冷静、集中的心态也很重要。</p><p><img src="https://jt26wzz.com/imgs/blog_007_4.jpg"></p><p><strong>2、<a href="https://allthingssmitty.com/2025/04/21/when-to-use-map-vs-foreach/">When to use map() vs. forEach() - Matt Smith</a>[^3]</strong></p><p>标签：JavaScript,TypeScript,Node.js</p><p>一篇小短文，关于什么时候用 <code>map</code> 和 <code>forEach</code>。简单总结：当你需要使用返回值时用 <code>map</code>，当你不需要返回值并且要利用中间变量时，用 <code>forEach</code>。</p><p>不过实际工作中，我觉得 <code>for…of</code> 用的更多。除开时 ES-Lint unicorn 的规则外，还支持异步。</p><p><img src="https://allthingssmitty.com/img/posts/sunset-home-office-min.jpg"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://juejin.cn/post/7503480042803298338">Cursor平替Void开源AI编程工具实测你好，我是易安。 今天给大家分享一个开源AI编辑器的一手体验，已经发布很久了 - 掘金</a>[^5]</strong></p><p>标签：Tools,AI</p><p>最新 AI 编程工具的横评文章，通过生成一个完整的贪食蛇小游戏，对比了开源新秀 Void 和老牌 Cursor，JetBrains，Roo Code 的能力。结果自然还是 Cursor 依旧领先；Void 目前相对单一，不过热度很高；其他的模型也各有优势。</p><p>我自己的感受是代码质量和背后的模型有关。不过实际工作中从零生成一个项目的情况很少，更多的是现有项目的维护和修改。在这方面我的体验是 deepseek-v3 基本能满足需求了。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/void-testing.webp"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] zijie0&#x2F;HumanSystemOptimization: 健康学习到150岁 - 人体系统调优不完全指南: <a href="https://github.com/zijie0/HumanSystemOptimization">https://github.com/zijie0/HumanSystemOptimization</a></li><li>[2] 线上故障应急处理：4 年多 on call 经验总结: <a href="https://jt26wzz.com/posts/0007-online-firefighting-real-world-lessions-from-4-years-on-call/">https://jt26wzz.com/posts/0007-online-firefighting-real-world-lessions-from-4-years-on-call/</a></li><li>[3] When to use map() vs. forEach() - Matt Smith: <a href="https://allthingssmitty.com/2025/04/21/when-to-use-map-vs-foreach/">https://allthingssmitty.com/2025/04/21/when-to-use-map-vs-foreach/</a></li><li>[4] 一次装修维权，让我看到了deepseek无法逾越的鸿沟-现实房子下来了，麻烦也来了 2025年2月我的新房子终于交房了， - 掘金: <a href="https://juejin.cn/post/7480032817759518783">https://juejin.cn/post/7480032817759518783</a></li><li>[5] Cursor平替Void开源AI编程工具实测你好，我是易安。 今天给大家分享一个开源AI编辑器的一手体验，已经发布很久了 - 掘金: <a href="https://juejin.cn/post/7503480042803298338">https://juejin.cn/post/7503480042803298338</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：BongoCat 可爱的桌面宠物</title>
    <link href="/weekly/2025/05/11/17-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250504_20250511/"/>
    <url>/weekly/2025/05/11/17-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250504_20250511/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-05-04 - 2025-05-11</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这周<a href="https://mp.weixin.qq.com/s/X0tNlbhaFDYz2IMxoOtHOA">猫鱼周刊</a>的想法是“创作和变现”。其中一句：</p><blockquote><p>我觉得创作者交付的东西的价值对得起它的价格，并且对得起自己的良心是很重要的。</p></blockquote><p>我很赞同，但又觉得有些理想主义。正如作者提到的</p><blockquote><p>某种意义上说，只要能接受更低的下限，不用创作很优秀的内容，只要能搞定某些流程，就可以赚到钱。</p></blockquote><p>毕竟大厂名片、热点技术就自带流量，有了流量也就能变现。而如果目的就是变现，那也就和创作质量无关了。在某技术群里偶尔也能听到某小册太水，却因踩到了风口而销量很高。</p><p>我相信进行创作的大部份作者，或多或少都有着变现的想法，包括我自己。前期默默无闻时会把重心放到内容质量上，但真有了一定的积累后有能否在质量与变现之中取得平衡呢？</p><p>某金上有一个专门分析大作者成长路线的作者：程序员芋仔 他的拆解系列倒是可以看看，或许能有答案吧。</p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://2ality.com/2025/04/stringification-javascript.html">Converting values to strings in JavaScript</a>[^1]</strong></p><p>标签：TypeScript,JavaScript</p><p>一篇介绍了在 JavaScript 中几种字符串转换的方法。几种方法都有其局限性，不仔细研究的话还真不知道。特别是针对 Symbol，空对象这种数据类型。好在作者总结了一个表格，方便对比。</p><table><thead><tr><th></th><th>undefined</th><th>null</th><th>symbol()</th><th>{<strong>proto</strong>: null}</th></tr></thead><tbody><tr><td>String(v)</td><td>✔</td><td>✔</td><td>✔</td><td>TypeError</td></tr><tr><td>+ v</td><td>✔</td><td>✔</td><td>TypeError</td><td>TypeError</td></tr><tr><td>v.toString()</td><td>TypeError</td><td>TypeError</td><td>✔</td><td>TypeError</td></tr><tr><td>{}.toString.call(v)</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr></tbody></table><p>后面还讨论了关于 JSON.stringify 的用法。这个作者的文章写的都挺细的，上了好多次 Node.js Weekly 了。</p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://developers.redhat.com/articles/2025/04/02/practical-guide-llama-stack-nodejs-developers#using_mcp_with_llama_stack">A practical guide to Llama Stack for Node.js developers | Red Hat Developer</a>[^2]</strong></p><p>标签：Node.js,AI</p><p>一篇给 Node.js 开发者的 Llama 技术栈的文章。包括了基础的环境架构，API 调用以及 MCP 编写。适合作为入门文章。</p><p><img src="https://developers.redhat.com/sites/default/files/styles/share/public/nodejs-reference-architecture_2x.png?itok=rToXkOcY"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.ghibli.jp/works/#kimitachi">スタジオジブリの作品 - スタジオジブリ｜STUDIO GHIBLI</a>[^3]</strong></p><p>标签：Resource,FUN</p><p>吉卜力工作室官方网站。有电影中的一些画面，非常适合做桌面、PPT 等。喜欢吉卜力的朋友们可以去看看。</p><p><img src="https://www.ghibli.jp/images/kimitachi.jpg"></p><p><strong>2. <a href="https://konata9.github.io/2025/05/10/2025/ble-issue-of-hhkb/"> HHKB 休眠后蓝牙链接的问题</a>[^4]</strong></p><p>标签：键盘,其他</p><p>最近在使用 HHKB 时，发现电脑唤醒后键盘的蓝牙时常链接不上。虽然通过其他位置的配对暂时解决了问题，记录了下问题以及售后交流过程。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/HHKB-wasabi.jpg"></p><p><strong>3. <a href="https://github.com/ayangweb/BongoCat">BongoCat</a>[^5]</strong></p><p>标签：其他,FUN</p><p>一个非常可爱的桌面宠物猫猫，会根据你的按键以及鼠标的移动进行反应。云养猫爱好者的福音，也可以给日常工作中带来一丝乐趣。Tauri 框架是真的厉害啊。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/BongoCat.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Converting values to strings in JavaScript: <a href="https://2ality.com/2025/04/stringification-javascript.html">https://2ality.com/2025/04/stringification-javascript.html</a></li><li>[2] A practical guide to Llama Stack for Node.js developers | Red Hat Developer: <a href="https://developers.redhat.com/articles/2025/04/02/practical-guide-llama-stack-nodejs-developers#using_mcp_with_llama_stack">https://developers.redhat.com/articles/2025/04/02/practical-guide-llama-stack-nodejs-developers#using_mcp_with_llama_stack</a></li><li>[3] スタジオジブリの作品 - スタジオジブリ｜STUDIO GHIBLI: <a href="https://www.ghibli.jp/works/#kimitachi">https://www.ghibli.jp/works/#kimitachi</a></li><li>[4] HHKB 休眠后蓝牙链接的问题: <a href="https://konata9.github.io/2025/05/10/2025/ble-issue-of-hhkb/">https://konata9.github.io/2025/05/10/2025/ble-issue-of-hhkb/</a></li><li>[5] BongoCat: <a href="https://github.com/ayangweb/BongoCat">https://github.com/ayangweb/BongoCat</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：MCP 管理工具来了！</title>
    <link href="/weekly/2025/04/27/16-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250420_20250427/"/>
    <url>/weekly/2025/04/27/16-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250420_20250427/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-04-20 - 2025-04-27</p><p>祝各位五一节快乐，在这个属于劳动者的节日里好好放松一下吧。</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://github.com/josean-dev/dev-environment-files">josean-dev&#x2F;dev-environment-files</a>[^1]</strong></p><p>标签：Neovim,Tools</p><p>一个存放了作者个人工具配的项目。我主要参考其中的 NeoVim 的配置。自从用了一段时间的 LazyVim 后，萌生了想配置属于自己的 NeoVim。寻找参考的过程中发现了这个项目。</p><p>目前一边参考这个项目一边使用 AI 帮忙配置，完成之后会写博客分享。目前卡在 LSP 的配置中，AI 也来来回回折腾了几回，看来确实有难度。</p><p><img src="https://opengraph.githubassets.com/ba49f7b5277979df1689d124b1df87421f2ba30b2704a2b86ebeb0f544f23baa/josean-dev/dev-environment-files"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools">x1xhlol&#x2F;system-prompts-and-models-of-ai-tools: FULL v0, Cursor, Manus, Same.dev, Lovable, Devin, Replit Agent &amp; Windsurf Agent System Prompts, Tools &amp; AI Models.</a>[^2]</strong></p><p>标签：AI,提示词,Prompt</p><p>一个搜集了 Cursor、Devin、Windsurf 等 AI 大厂内部提示词的项目。提示词的好坏能影响 AI 给出的回答质量。这个项目的提示词基本都是 txt 格式。</p><p>突然想到，如果我们把这个项目作为知识库是不是能让 AI 基于此完善属于我们自己的提示词呢？感觉值得一试。</p><p><img src="https://opengraph.githubassets.com/efe67f5e9fed050a5e85530ccb5943d224ce22c7267df34e83a342aef8f3ba8d/x1xhlol/system-prompts-and-models-of-ai-tools"></p><p><strong>2、<a href="https://mcpm.sh/">MCPM - MCP Manager | mcpm.sh</a>[^3]</strong></p><p>标签：AI,Tools,MCP</p><p>一个管理 MCP 的工具类似之前介绍的 Toolbase，只不过是命令行版。支持更多的 Client 如 5ire、trae 等。</p><p>之前说什么来着？在 MCP 爆发的前提下，早晚得出现管理工具。这不就来了嘛！还是起到一个 Proxy 的作用。文档也比较简单，个人感觉比 Toolbase 用着更舒服。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/mcpm.sh.png"></p><p><strong>3、<a href="https://surveygo.thunlp.org/">SurveyGO</a>[^4]</strong></p><p>标签：AI,Tools</p><p>一个 AI 帮助撰写综述报告的工具”卷姬“（二次元气息浓厚）。可以直接让 AI 编写，也可以基于上传的文件编写。很有意思，也有开源版可以部署。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/survy-go.PNG"></p><p><strong>4、<a href="https://miantiao.me/posts/guide-to-running-mcp-server-in-a-sandbox/">在 Docker 沙箱中运行 MCP Server</a>[^5]</strong></p><p>标签：AI,Tools,MCP</p><p>一篇关于 Docker 中运行 MCP Server 的文章。目前的 MCP 服务主要以 npx（NPM 生态）和 uvx（Python 生态）为主，而近 5 年来也有不少投毒事件。因此作者对在本地安装此类服务的安全性产生了担忧。文章提到可以利用 MCP Proxy 项目将 MCP Server 运行在 Docker 中，通过 SSE 的方式从而减少风险。</p><p>如此一来就类似 mcpm 主要的 MCP 管理工具了。放在 Docker 里倒也挺符合我“洁癖”的。我目前的基础设施都是在 Docker 中，比如 MongoDB、Redis。不要了就直接干掉，非常清爽省心。</p><p><img src="https://miantiao.me/posts/guide-to-running-mcp-server-in-a-sandbox.png"></p><p><strong>5、<a href="https://mcp.ifuryst.com/">Hello from MCP网关 | MCP网关</a>[^6]</strong></p><p>标签：AI,Tools,MCP</p><p>一个可以通过配置将 API 转换为 MCP server 的网关服务，支持 RESTFul 和 gRPC 协议。也支持 Docker 部署和 K8s 部署。这个工具直接免去了额外开发 MCP Server 的过程，对已有项目改造能起到作用。</p><p>只是项目较新，文档还有待补充。可以拿来练手，但上生产还得再需观察。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/mcp-gateway.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] josean-dev&#x2F;dev-environment-files: <a href="https://github.com/josean-dev/dev-environment-files">https://github.com/josean-dev/dev-environment-files</a></li><li>[2] x1xhlol&#x2F;system-prompts-and-models-of-ai-tools: FULL v0, Cursor, Manus, Same.dev, Lovable, Devin, Replit Agent &amp; Windsurf Agent System Prompts, Tools &amp; AI Models.: <a href="https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools">https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools</a></li><li>[3] MCPM - MCP Manager | mcpm.sh: <a href="https://mcpm.sh/">https://mcpm.sh/</a></li><li>[4] SurveyGO: <a href="https://surveygo.thunlp.org/">https://surveygo.thunlp.org/</a></li><li>[5] 在 Docker 沙箱中运行 MCP Server: <a href="https://miantiao.me/posts/guide-to-running-mcp-server-in-a-sandbox/">https://miantiao.me/posts/guide-to-running-mcp-server-in-a-sandbox/</a></li><li>[6] Hello from MCP网关 | MCP网关: <a href="https://mcp.ifuryst.com/">https://mcp.ifuryst.com/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：有术无道，止于术</title>
    <link href="/weekly/2025/04/20/15-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250413_20250420/"/>
    <url>/weekly/2025/04/20/15-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250413_20250420/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-04-13 - 2025-04-20</p><h2 id="思考：有术无道，止于术"><a href="#思考：有术无道，止于术" class="headerlink" title="思考：有术无道，止于术"></a>思考：有术无道，止于术</h2><p>最近在看 B 站 Up <a href="https://space.bilibili.com/162183?spm_id_from=333.337.0.0">原子能</a>的 MPGA（Make Programming Great Again）系列视频。Up 是位拥有丰富从业资历的前辈，视频内容通俗但有深度。如果你也有一定的行业经验，相信会有很多共鸣。</p><p>系列视频并非专注在技术细节，而是从更高的架构维度来分析问题。有种“传道”的感觉，这也让我想到了古语“有道无术，术尚可求也；有术无道，止于术”。</p><p>开发这个工作都是先学习一门语言，即“术”，然后在一次次的项目中逐渐悟出“道”。自从开始做架构方面的工作后，这种感受越发明显。</p><p>架构并不依赖于某个语言，而是资源的统筹、各方平衡以及解决问题的思路。如果不能跳出“术”的范畴，那就只能“止于术”了。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/thinking-shu-and-dao.png"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.woshipm.com/marketing/6189186.html">万字拆解2025年达人营销的100个真相 – 人人都是产品经理</a>[^1]</strong></p><p>标签：Resource,思考</p><p>关于达人（网红）营销的分析。从数据大盘、平台、价值、广告、营销等方面进行分析，列举了一些数据和观点，有点小意思。</p><p>混迹掘金的小伙伴可能不会陌生，在编程这块也有不少“达人”。他们是否也是遵循着里面的一些规律呢？</p><p><img src="https://image.woshipm.com/2023/04/14/85dbf876-daa1-11ed-9b82-00163e0b5ff3.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://codeimage.dev/">CodeImage - A tool to manage and beautify your code screenshots</a>[^2]</strong></p><p>标签：Tools</p><p>一个让代码美化工具，可以把代码转换为不同编辑器主题的图片，适合用来分享。</p><p>非 Markdown 格式的阅读器对于代码的渲染是非常可怕的，且不说语法着色，连基本的排版都是问题。但这类工具的出现就很好地解决了这个问题。适合在公众号、微博等平台发布。</p><p><img src="https://github.com/riccardoperra/codeimage/blob/main/assets/codeimage_card.png?raw=true"></p><p><strong>2、<a href="https://github.com/CrazyMrYan/md-tauri">CrazyMrYan&#x2F;md-tauri: 轻量级桌面端 markdown 编辑器（支持Mac、Ubuntu、Windows），支持一键复制粘贴公众号，致力于打造快速高效的md编辑神器</a>[^5]</strong></p><p>标签：Tools</p><p>一个 Markdown 转公众号的桌面工具。</p><p>我也是使用 mdnice 做转换非常丝滑。但是 mdnice 有资源限制，打算尝试一下看看。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/md-tauri.png"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://allthingssmitty.com/2025/04/10/mastering-default-values-in-javascript-with-the-nullish-coalescing-operator/">Mastering default values in JavaScript with the nullish coalescing (??) operator - Matt Smith</a>[^3]</strong></p><p>标签：JavaScript,Node.js</p><p>JavaScript 的非空运算符 ?? 的默认值。</p><p>与 || 最大的不同就是 ?? 只将 null 和 undefined 视为 false，而 || 则会把 falsey 的值（如 0, NaN, false, ‘’)都视为 false。因此 ?? 的情况用来做默认值会更安全，尤其是从数据库等地方取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> _default = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value ?? _default); <span class="hljs-comment">// Output: 0 (because 0 is not null or undefined)</span><br></code></pre></td></tr></table></figure><p><strong>2、<a href="https://rauljordan.com/why-go-error-handling-is-awesome/">Why Go’s Error Handling is Awesome</a>[^4]</strong></p><p>标签：Coding,思考,Go,JavaScript</p><p>一篇文章，解释了为什么 Go 的错误处理是优秀的。简单地来说就是把错误处理与正确情况放到同一层级，保证了错误可以被明确追踪。尽管这样会增加一些代码量，但能让整个逻辑链路变得清晰，也让错误更容易追踪。</p><p>JavaScript 的 try&#x2F;catch 方式，虽然在 Happy case 的情况下写的很爽，但会隐藏错误反而会增加后期 debug 的负担。而如果每个方法都做错误处理，又会增加额外的代码量。 try&#x2F;catch 由于有作用域，还可能额外引入 let 。</p><p>关于类似的错误处理，之前也翻译过文章：<a href="https://konata9.github.io/2024/05/10/2024/translate-ts-with-go-and-rust-errors/">译：在 TypeScript 中像 Go 和 Rust 那样处理错误？没有 Try&#x2F;Catch</a>。也强烈推荐 B 站 Up 原子能的视频 <a href="https://www.bilibili.com/video/BV1gJS9YeEsz/?spm_id_from=333.1387.collection.video_card.click&vd_source=832fe66f8c60a63f3122a67185392b41">什么是正确的错误处理方法【让编程再次伟大#21】</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// In controllers/user.go</span><br><span class="hljs-keyword">if</span> err := db.CreateUser(user); err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;could not create user: %w&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// In database/user.go</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db *Database)</span></span> CreateUser(user *User) <span class="hljs-type">error</span> &#123;<br>    ok, err := db.DoesUserExist(user)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;could not check if user already exists in db: %w&quot;</span>, err)<br>    &#125;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db *Database)</span></span> DoesUserExist(user *User) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> err := db.Connected(); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;could not establish db connection: %w&quot;</span>, err)<br>    &#125;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db *Database)</span></span> Connected() <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> !hasInternetConnection() &#123;<br>        <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;no internet connection&quot;</span>)<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 万字拆解2025年达人营销的100个真相 – 人人都是产品经理: <a href="https://www.woshipm.com/marketing/6189186.html">https://www.woshipm.com/marketing/6189186.html</a></li><li>[2] CodeImage - A tool to manage and beautify your code screenshots: <a href="https://codeimage.dev/">https://codeimage.dev/</a></li><li>[3] Mastering default values in JavaScript with the nullish coalescing (??) operator - Matt Smith: <a href="https://allthingssmitty.com/2025/04/10/mastering-default-values-in-javascript-with-the-nullish-coalescing-operator/">https://allthingssmitty.com/2025/04/10/mastering-default-values-in-javascript-with-the-nullish-coalescing-operator/</a></li><li>[4] Why Go’s Error Handling is Awesome: <a href="https://rauljordan.com/why-go-error-handling-is-awesome/">https://rauljordan.com/why-go-error-handling-is-awesome/</a></li><li>[5] CrazyMrYan&#x2F;md-tauri: 轻量级桌面端 markdown 编辑器（支持Mac、Ubuntu、Windows），支持一键复制粘贴公众号，致力于打造快速高效的md编辑神器: <a href="https://github.com/CrazyMrYan/md-tauri">https://github.com/CrazyMrYan/md-tauri</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：AI 不会淘汰人，但会用 AI 的人会</title>
    <link href="/weekly/2025/04/13/14-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250406_20250413/"/>
    <url>/weekly/2025/04/13/14-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250406_20250413/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-04-06 - 2025-04-13</p><h2 id="思考：AI-不会淘汰人，但会用-AI-的人会"><a href="#思考：AI-不会淘汰人，但会用-AI-的人会" class="headerlink" title="思考：AI 不会淘汰人，但会用 AI 的人会"></a>思考：AI 不会淘汰人，但会用 AI 的人会</h2><p>这周完全使用 DeepseekV3 完成了一个数据清理的任务。全程我只和 AI 交互以及执行脚本，不参与具体代码的实现。</p><p>整个任务用了 1 周时间完成。如果我实际参与代码编写调试，这个任务可能只需要 2-3 天。但，如果告诉你这一周是我的碎片时间呢？</p><p>换句话说，AI 提高了我的效率。因为 AI 承担起了数据清理这类目的明确，流程重复的“脏活”，我可以去做其他更重要的任务。</p><p>周五和同事分享了这个过程。同事感慨到 <strong>“AI 不会淘汰人，但会用 AI 的人会淘汰不会使用 AI 的人”。</strong></p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/ai-assisting-a-human.png"></p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://github.com/luohy15/y-cli?tab=readme-ov-file">y-cli&#x2F;README.md at main · luohy15&#x2F;y-cli</a>[^1]</strong></p><p>标签：AI,Tools</p><p>一个国人作者开发的命令行的 AI Client，支持 MCP。功能比较全，并且支持 OpenRouter 上的免费模型。适合喜欢折腾命令行同时考虑成本的朋友。Github 上的文档略简单，需要花一点时间熟悉配置。</p><p>我挺喜欢命令行工具的，小而美。目前在用 OpenRouter 的免费模型时，复杂任务有时候会摆烂直接不返回。如果需要用到 MCP 需要挑选支持 Tools 的模型。</p><p>作者还写了一篇博客介绍了制作这款工具的原因：<a href="https://luohy15.com/posts/ai/y-cli-introduction/">https://luohy15.com/posts/ai/y-cli-introduction/</a> 希望后续能变得更好。</p><p><img src="https://github.com/luohy15/y-cli/raw/main/.github/visuals/demo.png"></p><p><strong>2、<a href="https://github.com/punkpeye/awesome-mcp-clients/">punkpeye&#x2F;awesome-mcp-clients: A collection of MCP clients.</a>[^2]</strong></p><p>标签：AI,Resource</p><p>一个汇总支持 MCP Client 的 Awesome 项目。5ire、Cherry-studio 以及 y-cli 都在这个项目中。</p><p>需要支持 MCP 的客户端的朋友可以在上面找找有没有合适的工具。</p><p>类似的 MCP 查找网站除了上期提到的 mcp.so 还有下面两个，功能都类似。可以根据自己的喜好和网络条件进行访问。</p><p>比起查找网站，我更期待类似 Toolbase 的 MCP 管理工具，可以把本地的 MCP 都集中管理起来。</p><ol><li>MCP Flow：<a href="https://mcpflow.io/home">https://mcpflow.io/home</a></li><li>MCP Package Registry：<a href="https://mcp-get.com/">https://mcp-get.com/</a></li></ol><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/awesome-mcp-clients.png"></p><p><strong>3、<a href="https://juejin.cn/post/7491116054372352009#comment">奔溃，deepseekv3-0324真的能用来开发吗？deepseekV3-0324（以下简称deepseekV3）发布 - 掘金</a>[^3]</strong></p><p>标签：AI,Coding</p><p>作者使用相同的提示词，分别让 DeepseekV3、Claude3.5、Claude3.7 制作贪食蛇小游戏来比较模型能力，很直观。对于我这种不喜欢看枯燥数据和复杂评价标准的人来说非常友好。</p><p>这几个模型我也都有使用过，个人的体验与作者的结论基本相同。</p><p>DeepseekV3 在面对简单需求时表现和 Claude近似，但在处理复杂任务时就有些力不从心了。</p><p>总的来说，AI 辅助开发对提示词还是有一定要求的，把需求聊细聊透效果才会更好。所谓“做的越慢，做的越快”。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/dsv3-vs-cursor.webp"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://ramsayleung.github.io/zh/post/2025/%E8%BF%87%E6%B2%B3%E5%8D%92/">《过河卒》: 比特币雏形之父之父的故事</a>[^4]</strong></p><p>标签：思考,励志,Resource</p><p>一篇《过河卒》的读后感。《过河卒》作者戴习为是文革前就读于中国科技大学电子系的高材生，也是比特币前身 b-money 作者戴维的父亲。戴习为青年时期正值国家重要时期，但他无论身处什么环境都能利用身边不断学习的劲头让人印象深刻。</p><p> 社会对成功的定义往往固化,「出将入相」「成名成家」「腰缠万贯」，但「将相本无种」，真正的成功，是超越昨天的自己。</p><p>深有感触，只是我自己明白这个道理的时候有点晚。真正要比较的对手永远都是昨天的自己。</p><p>感谢 Ramsay 的这篇读后感。先加到书单里（目前微信读书还待上架）。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/guo-he-zu-read-after.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] y-cli&#x2F;README.md at main · luohy15&#x2F;y-cli: <a href="https://github.com/luohy15/y-cli?tab=readme-ov-file">https://github.com/luohy15/y-cli?tab=readme-ov-file</a></li><li>[2] punkpeye&#x2F;awesome-mcp-clients: A collection of MCP clients.: <a href="https://github.com/punkpeye/awesome-mcp-clients/">https://github.com/punkpeye/awesome-mcp-clients/</a></li><li>[3] 奔溃，deepseekv3-0324真的能用来开发吗？deepseekV3-0324（以下简称deepseekV3）发布 - 掘金: <a href="https://juejin.cn/post/7491116054372352009#comment">https://juejin.cn/post/7491116054372352009#comment</a></li><li>[4] 《过河卒》: 比特币雏形之父之父的故事: <a href="https://ramsayleung.github.io/zh/post/2025/%E8%BF%87%E6%B2%B3%E5%8D%92/">https://ramsayleung.github.io/zh/post/2025/%E8%BF%87%E6%B2%B3%E5%8D%92/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：MCP + AI 会是下一波革命吗？</title>
    <link href="/weekly/2025/04/06/13-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250330_20250406/"/>
    <url>/weekly/2025/04/06/13-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250330_20250406/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-03-30 - 2025-04-06</p><blockquote><p>注：这周学习许多关于 MCP 方面的知识，所以 AI 和 MCP 的内容会比较多。</p></blockquote><h2 id="思考：MCP-AI-会是下一波革命吗？"><a href="#思考：MCP-AI-会是下一波革命吗？" class="headerlink" title="思考：MCP + AI 会是下一波革命吗？"></a>思考：MCP + AI 会是下一波革命吗？</h2><p>之前 AWS Q Developer 可以在命令行中进行对话和执行代码给我带来了很大的震撼。于是就开始学习起 MCP 的相关知识。</p><p>我感觉大模型和 MCP 就像当年 VSCode 和插件的关系，未来一定会有爆炸式的增长。AI 能做的事也会越来越多。当突破足够多的边界时，“贾维斯”或许就真的来了。</p><p>所以与其等着未来被 AI “革命”，不如先学起来。至少“卸载”我们程序员自己的程序还是自己来做吧。</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://juejin.cn/post/7485180710368034867">Agent TARS 评测：开源版 Manus？实际体验告诉你答案！前言 最近，字节跳动新开源了一款类 Manus 的  - 掘金</a>[^1]</strong></p><p>标签：Tools</p><p>字节推出的类似 Manus 的 AI Agent。这篇文章给出了比较详细的体验。作者的评价是有一定的可玩性。暂时有以下一些因素会影响体验：</p><ol><li>网络问题：部分代理无法使用</li><li>模型的兼容性不足：部分 OpenAI 兼容模型在执行任务时会报错</li><li>Token 消耗巨大</li><li>执行任务效果一般（主要在于模型）</li></ol><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/agent-tars.png"></p><p><strong>2、<a href="https://juejin.cn/post/7487066699357224975">10分钟搞定高德地图MCP！我用AI解决了约会地点选择难题AI+MCP：解决约会地点选择难题 如果有一个AI能够自动筛选 - 掘金</a>[^3]</strong></p><p>标签：AI</p><p>一个 MCP 的应用实例，在 Windsurf 中集成了高德地图的 MCP 然后进行调用，简单易懂。</p><p>之前我对 MCP 的概念比较模糊，在 Windsurf 中看到了也不知道怎么用，看了这个例子后清晰很多。特别是下面这段：</p><blockquote><p>再抽象一下，大模型+MCP对哪些需求更有价值？</p><ol><li>过去的产品本身不好解决，且大模型单独也不好解决的问题</li><li>不能自动化解决的问题</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/gdmap-mcp.webp"></p><p><strong>3、<a href="https://mcp.so/zh">MCP Server（MCP 服务器）</a>[^4]</strong></p><p>标签：AI,Tools</p><p>一个汇总了不同 MCP 的网站。在上面可以找到想要的 MCP 进行配置，一般会用在 Cursor、Windsurf 上。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/mcp.png"></p><p><strong>4、<a href="https://gettoolbase.ai/">Toolbase | Connect Your Favorite Apps With MCP</a>[^5]</strong></p><p>标签：AI,Tools</p><p>管理 MCP 的 MCP。提供了 GUI 界面方便管理 MCP，对于 AI 客户端（Cursor、Windsurf 等）只需要对接 Toolbase 即可。</p><p>之前 <a href="https://konata9.github.io/2025/04/04/2025/mcp-learning-journy-search-and-manage/">MCP 探索笔记：查找与管理你需要的 MCP</a> 中也提到了利用 Toolbase 管理 MCP的方式。</p><p><img src="https://gettoolbase.ai/og-image.png"></p><p><strong>5、<a href="https://github.com/nanbingxyz/5ire?tab=readme-ov-file">nanbingxyz&#x2F;5ire: 5ire is a cross-platform desktop AI assistant, MCP client. It compatible with major service providers,  supports local knowledge base and  tools via model context protocol servers .</a>[^7]</strong></p><p>标签：AI,Tools</p><p>一个简洁优雅的聚合式 MCP 客户端，集成了 ChatBox、MCP 调用以及本地知识库。作者 Ironben 也在掘金上发表了开发客户端原因的文章。</p><p>我使用下来体验很好，也写了篇介绍文章<a href="https://konata9.github.io/2025/04/05/2025/5ire-a-mcp-client/">MCP 探索笔记：5ire 一个聚合式 MCP 客户端</a> 利用 MCP 可以直接调用系统命令，让我可以靠对话完成许多任务。除了 OpenRouter 上的模型暂时没法使用 MCP 外，几乎没有缺点了。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/5ire-chat.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://w.is/">W.is Whois Lookup Tool</a>[^2]</strong></p><p>标签：Tools</p><p>查询域名归属的网站，界面非常干净。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/wis.png"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://doc.vben.pro/">Vben Admin</a>[^6]</strong></p><p>标签：Tools</p><p>基于 Vue3 的后台管理框架。功能丰富，UI 也很漂亮，非常适合用来做内部管理系统的前端。GitHub star 已有 27.5K，更新频率也很高。</p><p>这个框架也是我在调研公司的项目时发现的。比较看好也推荐给了老大。</p><p><img src="https://raw.githubusercontent.com/Konata9/pic-base/main/pics/vben-admin.png"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/">How to Write Blog Posts that Developers Read</a>[^8]</strong></p><p>标签：写作,思考</p><p>一篇写作技巧文章。作者分享了如何写好吸引开发者阅读文章的技巧。主要有以下几点：</p><ol><li>直奔主题：最直接地告诉读者，这篇文章讲了什么，能从文章中学到什么。</li><li>扩大受众范围：比如初级 Java 程序员的体量比高级要大，而程序员的体量则更大。当然你不能无限扩大范围，但可以稍微扩大一些。</li><li>规划好你的曝光方式：针对不同的技术文章，考虑不同的曝光平台。</li></ol><p>虽然作者的例子是以外网写作为主，看完之后感觉很有道理。国内写作也能进行参考。</p><p><img src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/og-cover.webp"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Agent TARS 评测：开源版 Manus？实际体验告诉你答案！前言 最近，字节跳动新开源了一款类 Manus 的  - 掘金: <a href="https://juejin.cn/post/7485180710368034867">https://juejin.cn/post/7485180710368034867</a></li><li>[2] W.is Whois Lookup Tool: <a href="https://w.is/">https://w.is/</a></li><li>[3] 10分钟搞定高德地图MCP！我用AI解决了约会地点选择难题AI+MCP：解决约会地点选择难题 如果有一个AI能够自动筛选 - 掘金: <a href="https://juejin.cn/post/7487066699357224975">https://juejin.cn/post/7487066699357224975</a></li><li>[4] MCP Server（MCP 服务器）: <a href="https://mcp.so/zh">https://mcp.so/zh</a></li><li>[5] Toolbase | Connect Your Favorite Apps With MCP: <a href="https://gettoolbase.ai/">https://gettoolbase.ai/</a></li><li>[6] Vben Admin: <a href="https://doc.vben.pro/">https://doc.vben.pro/</a></li><li>[7] nanbingxyz&#x2F;5ire: 5ire is a cross-platform desktop AI assistant, MCP client. It compatible with major service providers,  supports local knowledge base and  tools via model context protocol servers .: <a href="https://github.com/nanbingxyz/5ire?tab=readme-ov-file">https://github.com/nanbingxyz/5ire?tab=readme-ov-file</a></li><li>[8] How to Write Blog Posts that Developers Read: <a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/">https://refactoringenglish.com/chapters/write-blog-posts-developers-read/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：如果你会 TypeScript，那你就能学会日语</title>
    <link href="/weekly/2025/03/30/12-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250323_20250330/"/>
    <url>/weekly/2025/03/30/12-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250323_20250330/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-03-23 - 2025-03-30</p><blockquote><p>周刊：<a href="https://konata9.github.io/weekly/">此方的手帐 - 周刊</a><br>微信公众号：<a href="https://konata9.github.io/weekly/images/wechat-qr-code.jpg">此方的手帐</a></p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这周在微信读书上读的一篇轻记实<a href="https://weread.qq.com/web/reader/88332a70813ab9c22g016fd8#outline?noScroll=1">《一群穷孩子的人生实验》</a>。讲述了十年前北京的“青云计划”。从北京的六十万打工子弟中挑选出孩子进行“因材施教”的教育。记者发现了这个项目并采访了这个项目中的几位学生。</p><p>从世俗层面来看，这个项目并没有成功。但参与项目的学生认为这是成功的，因为这个项目教会了他们如何做一个向上的人、一个正直的人。​</p><p>文章最后“放到现在可能没有人再愿意干这么一件费力又不讨好的事情”让人有些唏嘘。读完后最大的感受便是世俗的理解并不等于个人的感受。专注自己，减少外界的影响，做自己想做的事情才能活出自己吧。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://vectorcraftr.com/">VectorCraftr</a>[^1]</strong></p><p>标签：Resource</p><p>一个可以商用的免费插画网站。画风很清新，用作博客配图或者封面都很合适。</p><p><img src="https://vectorcraftr.com/images/screenshot.png"></p><hr><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p><strong>1、<a href="https://socket.dev/blog/node-js-tsc-votes-to-stop-distributing-corepack">Node.js 技术委员会投票决定停止分发 Corepack - Socket</a>[^2]</strong></p><p>标签：Node.js</p><p>Node.js 将在 v24 版本之后移除 Corepack。意味着需要手动安装 Corepack 才能使用。这一改动对于使用非 npm 的项目有一点影响。不过 v24 版本的生命周期会很长，未来 2 - 3 年可以不用担心。</p><p>Corepack 在 v16 中引入作为一个“桥梁”，用来抹平 Node 与不同的包管理器如 yarn, pnpm 的差异。可以让用户指定包管理器的版本，便于管理。但由于使用不广泛和其他原因，Corepack 将被移除出 Node 的核心代码，作为独立的库存在。</p><p><img src="https://cdn.sanity.io/images/cgdhsj6q/production/be8ab80c8efa5907bc341c6fefe9aa20d239d890-1600x1097.png?w=1000&fit=max&auto=format"></p><p><strong>2、<a href="https://nodesource.com/blog/Node.js-Supports-TypeScript-Natively">Node.js 现已原生支持 TypeScript：你需要知道的一切</a>[^3]</strong></p><p>标签：TypeScript,Node.js</p><p>Node.js 在 v23.6.0 版本开始原生支持 TypeScript。不过支持的方式比较粗暴，很多高级特性如装饰器、管道符、命名空间都还不支持。可以说支持了，但也没支持。</p><p>因为和我工作有关，所以我挑选了部分我感兴趣的内容整理并发在博客上。<br>[关于 Node.js 原生支持 TypeScript 的总结](<a href="https://konata9.github.io/2025/03/29/2025/something-about-nodejs-support-typescript/)">https://konata9.github.io/2025/03/29/2025/something-about-nodejs-support-typescript/)</a></p><p><img src="https://images.ctfassets.net/hspc7zpa5cvq/5SWWbIGJXptKtsPUBe2Vod/7d574a3a1facba0c092b988caff06398/Node___TS__1_.png"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://1q43.blog/post/11035/">只是个喷嚏 | 虹线</a>[^4]</strong></p><p>标签：AI,小说</p><p>一篇科幻小说。以花粉过敏为主题的创作，探讨了未来环境与科技的关系，行文风格流畅，内容讽刺。</p><p>惊艳的是作者在最后说明这是 AI 写的（人工调整比例不到 5%）。让人感叹 AI 的实力以及全新的用法。人类提供创意，AI 输出内容看来也会是一条不错的路线。</p><p>小说 1 万字左右，感兴趣的朋友可以去阅读一下，很不错。</p><p><img src="https://i0.wp.com/1q43.blog/wp-content/uploads/2025/03/chatgpt-image-2025326-14-58-29-912827-GWQxyfGn.png?fit=1200,800&ssl=1"></p><p><strong>2、<a href="https://github.com/typedgrammar/typed-japanese/blob/main/blog.md">typed-japanese&#x2F;blog.md at main · typedgrammar&#x2F;typed-japanese</a>[^5]</strong></p><p>标签：TypeScript,FUN</p><p>国人大佬王译锋利用 TypeScript 来解析日语语法的文章，“如果你会 TypeScript，那你就能学会日语”。这个仓库也上了这周的 JavaScript Weekly。</p><p>好奇看了一眼，里面的例子居然是芙丽莲和“母鸡卡”的台词我直接笑了出来。看来大佬也是个隐藏二次元。</p><p>用 TS 来学习日语语法，这个思路确实新颖，而且语法部分写的也很仔细。因为我已经会日语了，也做不了效果评价。</p><p>但就我个人的经验，学习语言还是得多背单词、多背课文。当年在老师的教导下，硬生生地被完了 3 本新编所有的文章后，突然就开窍了。语感一下就好了非常多，后面去到日本工作时差不多 3 个多月就能和对答如流了。虽然前期痛苦，但是一旦背的足够多确实能引起质变。（怎么听着像 AI 的数据投喂呢）</p><p>顺带一提，这位也是 JavaScript 二十年 一书的中文译者。</p><p><img src="https://opengraph.githubassets.com/a3f491c972e98e664d278480a7f73a9834749c0f241861526ce70feaed1a8710/typedgrammar/typed-japanese"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] VectorCraftr: <a href="https://vectorcraftr.com/">https://vectorcraftr.com/</a></li><li>[2] Node.js 技术委员会投票决定停止分发 Corepack - Socket: <a href="https://socket.dev/blog/node-js-tsc-votes-to-stop-distributing-corepack">https://socket.dev/blog/node-js-tsc-votes-to-stop-distributing-corepack</a></li><li>[3] Node.js 现已原生支持 TypeScript：你需要知道的一切: <a href="https://nodesource.com/blog/Node.js-Supports-TypeScript-Natively">https://nodesource.com/blog/Node.js-Supports-TypeScript-Natively</a></li><li>[4] 只是个喷嚏 | 虹线: <a href="https://1q43.blog/post/11035/">https://1q43.blog/post/11035/</a></li><li>[5] typed-japanese&#x2F;blog.md at main · typedgrammar&#x2F;typed-japanese: <a href="https://github.com/typedgrammar/typed-japanese/blob/main/blog.md">https://github.com/typedgrammar/typed-japanese/blob/main/blog.md</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：Free QWQ - 免费分布式AI算力平台</title>
    <link href="/weekly/2025/03/23/11-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250316_20250323/"/>
    <url>/weekly/2025/03/23/11-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250316_20250323/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-03-16 - 2025-03-23</p><blockquote><p>周刊：<a href="https://konata9.github.io/weekly/">此方的手帐 - 周刊</a><br>微信公众号：<a href="https://konata9.github.io/weekly/images/wechat-qr-code.jpg">此方的手帐</a></p></blockquote><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://blog.apify.com/web-scraping-with-cheerio/#how-to-use-axios-with-cheerio">2025年使用Cheerio进行网页抓取</a>[^1]</strong></p><p>标签：Tools,Node.js</p><p>Node.js 上老牌的网页抓取工具 Cheerio 的简介。文章很长，但非常适合入门。如果有相关经验，只关注和 Puppeteer 的联动即可。</p><p>最早接触 Node.js 的时候就是做爬虫，Cheerio 拥有和 JQuery 接近的语法，非常适合前端。之后的工作里也鲜有类似的需求便少有关注。这次看到感觉有点老友重逢的味道。其中与 Puppeteer 联动实现现代动态网站的抓取很有意思，学到了新的知识。</p><p><img src="https://blog.apify.com/content/images/2025/03/Web-scraping-with-Cheerio--compressed-.png"></p><p><strong>2、<a href="https://katafrakt.me/2024/11/09/booleans-are-a-trap/">布尔值是代码陷阱</a>[^5]</strong></p><p>标签：思考,TypeScript</p><p>作者通过一些例子介绍了布尔值的陷阱 —— 判断条件会指数级爆炸，而使用枚举类型会降低爆炸程度。作者提议仅在技术上使用布尔条件，针对业务逻辑以枚举类型为主。</p><p>类似的例子在工作中很常见。刚开始的需求可能只需要表示两种状态，那么布尔值就很方便；但随着业务的变化，当这个值需要增加第三种状态时，就只能再添加另一个布尔值，通过组合表示状态。此时判断逻辑就变成了 4 种。如果后续再有变化，那么复杂程度还会再翻一倍。</p><p>条件判断的优化也是好的代码风格之一，复杂的条件判断也很烧脑。尽早返回、用对象代替 <code>if else</code> 都是优化的手段。现在使用枚举代替布尔值，也是设计上的优化方式之一。</p><p><img src="/weekly/images/2025/boolean-is-trap.png"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://we0.ai/en">We0 - 一键生成任意代码的AI工具</a>[^2]</strong></p><p>标签：AI,Tools</p><p>一键生成任何代码的工具。从介绍和示例来，看主要集中在网页、小程序这类的前端代码。免费版一个月可以调用 15 次请求。没有尝试过，不过从现在 AI 生成代码的质量来看可能还行？</p><p><img src="/weekly/images/2025/we0.png"></p><p><strong>2、<a href="https://qwq.aigpu.cn/#gongji">Free QWQ - 免费分布式AI算力平台</a>[^3]</strong></p><p>标签：AI,Tools</p><p>一个免费无限制分布式 AI 算力平台，支持调用 QWQ32B 的 API。算力来自全国各地 50 台家用电脑，也可以贡献自己的闲置算力换取积分。</p><p><img src="/weekly/images/2025/free-qwq.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://github.com/darrenburns/posting">GitHub - darrenburns&#x2F;posting: 终端中的现代API客户端</a>[^4]</strong></p><p>标签：Tools</p><p>一个命令行版的 Postman，UI 很酷炫。习惯命令行操作的小伙伴可以试一试。</p><p><img src="https://repository-images.githubusercontent.com/806285077/4a45adf3-877e-4898-99f3-11f8f8150286"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 2025年使用Cheerio进行网页抓取: <a href="https://blog.apify.com/web-scraping-with-cheerio/#how-to-use-axios-with-cheerio">https://blog.apify.com/web-scraping-with-cheerio/#how-to-use-axios-with-cheerio</a></li><li>[2] We0 - 一键生成任意代码的AI工具: <a href="https://we0.ai/en">https://we0.ai/en</a></li><li>[3] Free QWQ - 免费分布式AI算力平台: <a href="https://qwq.aigpu.cn/#gongji">https://qwq.aigpu.cn/#gongji</a></li><li>[4] GitHub - darrenburns&#x2F;posting: 终端中的现代API客户端: <a href="https://github.com/darrenburns/posting">https://github.com/darrenburns/posting</a></li><li>[5] 布尔值是代码陷阱: <a href="https://katafrakt.me/2024/11/09/booleans-are-a-trap/">https://katafrakt.me/2024/11/09/booleans-are-a-trap/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：Cursor 的 Code Review 功能以及 .env 文件安全问题</title>
    <link href="/weekly/2025/03/16/10-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250309_20250316/"/>
    <url>/weekly/2025/03/16/10-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250309_20250316/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-03-09 - 2025-03-16</p><blockquote><p>周刊：<a href="https://konata9.github.io/weekly/">此方的手帐 - 周刊</a><br>微信公众号：<a href="https://konata9.github.io/weekly/images/wechat-qr-code.jpg">此方的手帐</a></p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>上周的<a href="https://weekly.tw93.fun/posts/213-%E8%89%AF%E6%B8%9A%E8%8D%89%E5%B1%8B/">潮流周刊</a>上看到一段关于及时行乐的思考，有些触动。</p><blockquote><p>假如这个东西是需要的，又是自己心动的，在价格上假如负担得起，那就买。年纪越大越觉得不要把想买的东西留到以后买，因为等到你老了时候已经没有当时感受了。</p></blockquote><p>“以后、以后” 有多少以后呢？真的到了“以后”心境又是否会改变呢？人的心境是会变化的。以前很爱玩的魔兽与英雄无敌 3，现在打开也没有以前那样快乐。所以不要给自己上太多枷锁，能力范围内尽量对自己好一些。</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://ameow.xyz/archives/simple-code-review-with-cursor">使用 Cursor 进行 Code Review（简易版）</a>[^3]</strong></p><p>标签：AI,Tools</p><p>一篇阿猫使用 Cursor 进行 Code Review 的实践，并且给出了配置。使用 Cursor 的朋友可以去参考一下。</p><p>我用的是 Windsurf。于是便仿照着编写了 Windsurf 的规则 —— <a href="https://konata9.github.io/2025/03/15/2025/my-windsurf-rules-sharing/">设定 Rules 让 Windsurf 进行 Code Review</a> 已经发布在我的博客上与公众号上。</p><p><img src="https://img.ameow.xyz/20250310230524158.webp"></p><p><strong>2、<a href="https://forum.cursor.com/t/env-file-question/60165/12">.env 文件安全问题 - Bug Reports - Cursor - 社区论坛</a>[^4]</strong></p><p>标签：Tools,Security</p><p>关于 Cursor 的安全问题，背景是一位用户发现 Cursor 会对 .env 文件进行提示，并且在进程中发现了上报的操作。.env 文件中会存放一些如数据库连接字符串、账户密码等敏感信息。这一问题会直接导致敏感数据的泄漏，从而引发重大的安全事故。帖子的作者给出了复现方式与视频链接，作者也因此暂停使用 Cursor。对此有担心的朋友可以关注一下。</p><p>这篇文章发表在 Cursor 的论坛，之后也得到了官方的回复。在新版的 Cursor 中引入了隐私模式与 .cursorignore 文件用来忽略指定文件。不过一些用户对官方的回复似乎并不买帐。</p><p>看了之后吓得我赶紧去看了 Windsurf 是否也有相关问题，索性暂时没有看到类似的问题。想到之前元宝的用户协议也引起了一波舆论，AI 时代下用户的数据隐私也是一个重要的问题。特别是当企业引入 AI 工具时，数据隐私会被格外看重。</p><p><img src="https://us1.discourse-cdn.com/flex020/uploads/cursor1/optimized/3X/5/b/5b4057565fa4fc0882429b9a511e13ab7c2bc1c3_2_1024x331.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://repomix.com/">Repomix</a>[^1]</strong></p><p>标签：AI</p><p>一个可以把项目代码打包成 XML、Markdown、txt 这些对 AI 友好的格式。之前有在想能否利用本地知识库与 AI 配合构建一个能分析项目代码的机器人，但发现一般的代码文件并不适合。这个工具正好可以帮助做到这一点。</p><p><img src="https://repomix.com/images/og-image-large.png"></p><p><strong>2、<a href="https://node-modules.dev/">Node Modules Inspector</a>[^2]</strong></p><p>标签：Node.js,Tools</p><p>分析 Node.js 项目依赖的工具。有网页版可以体验，也可以本地安装分析本地项目。在网页版试验了一下，会从深度、模块类型、作者等几个维度给出分析结果。</p><p>最近准备着手优化项目的依赖，减小项目体积。这个应该可以用上。</p><p><img src="/weekly/images/2025/node-modules-inspector.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li>[1] Repomix: <a href="https://repomix.com/">https://repomix.com/</a></li><li>[2] Node Modules Inspector: <a href="https://node-modules.dev/">https://node-modules.dev/</a></li><li>[3] 使用 Cursor 进行 Code Review（简易版）: <a href="https://ameow.xyz/archives/simple-code-review-with-cursor">https://ameow.xyz/archives/simple-code-review-with-cursor</a></li><li>[4] .env 文件安全问题 - Bug Reports - Cursor - 社区论坛: <a href="https://forum.cursor.com/t/env-file-question/60165/12">https://forum.cursor.com/t/env-file-question/60165/12</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻：TypeScript 的类型系统可以运行毁灭战士</title>
    <link href="/weekly/2025/03/09/09-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250302_20250309/"/>
    <url>/weekly/2025/03/09/09-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250302_20250309/</url>
    
    <content type="html"><![CDATA[<p>每周见闻：2025-03-02 - 2025-03-09</p><blockquote><p>周刊：<a href="https://konata9.github.io/weekly/">此方的手帐 - 周刊</a><br>微信公众号：此方的手帐</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>AI 时代下，除了显卡，下一个吃紧的会不会是内存？</p><p>对于使用 AI 的人来说，无论是本地模型还是 Agent 都是需要内存。有次在开了 4、5 个 Windsuf 后，我的 MBP（16 G）竟然跳出内存不够的警告。</p><p>打开 Activity Monitor 观察，只要 Windsuf 打开的时间一长。内存使用就直接翻黄。别提还有 Chrome、Teams 等其他“大户”。没想到有一天能在 Mac 上体验到卡顿。</p><p>再者苹果的笔记本也同意 16 G 内存起步，这次新款 Air 还支持到了 32 G 内存。可想随着今后的发展，各个软件对内存的需求只会越来越高。下次再有换电脑的需求时，可能得考虑内存的容量了。</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://socket.dev/blog/typescript-types-running-doom">TypeScript 的类型系统可以运行毁灭战士</a>[^1]</strong></p><p>标签：TypeScript,FUN</p><p>是的，你并没有看错。一位国外的大神使用 TypeScript（修改后的版本） 的<strong>类型系统</strong>成功运行了经典游戏 DOOM（毁灭战士）。为了做到这一点，他构建了一整套在 TypeScript 类型系统内的计算机系统，包括：</p><ol><li>RAM</li><li>磁盘系统</li><li>调用栈</li><li>子程序</li><li>内存指针</li><li>执行上下文</li></ol><p>活脱脱地手搓了一个系统，一些类型定义的文件更是多大了十多万行。作者修改了 TS 的各种限制，以支持各种超乎寻常的情况。</p><p>并且由于数量庞大，每次运行都要消耗 100G 内存。同时没有 IDE 能支持如此庞大的文件量；甚至连错误信息都只有内存溢出，完完全全的开发噩梦。</p><p>在如此严苛的条件下，作者坚持一年终于完成。为了渲染游戏的第一帧，项目需要在 12 天内处理 177 TB TypeScript 类型定义。</p><p>文章主要介绍了工作过程与难点，并且有一个简单的介绍视频。不得不说真的太牛了。这简直是体操中的体操了。</p><p>之前在看“神光”大神的 TS 类型体操的小册里，就有提到<br> TypeScript 的类型系统是图灵完备的，也就是能描述各种可计算逻辑。简单点来理解就是循环、条件等各种 JS 里面有的语法它都有，JS 能写的逻辑它都能写。</p><p>看来真的是一点都不假。</p><p><img src="https://cdn.sanity.io/images/cgdhsj6q/production/6ef017320c7bebf0c17e1ecf78c3e6fa5d6ae623-1792x1024.webp?w=1000&fit=max&auto=format"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.howtogeek.com/why-i-switched-to-firefox-and-never-looked-back/">为什么我切换到Firefox并从此不再回头</a>[^2]</strong></p><p>标签：Tools</p><p>本文介绍了作者在旧电脑上的 Chrome 占用太多内存，从而用回 FireFox 的原因。在 Chrome 上能做的事，FireFox 也都能做，并且在多标签的情况下内存占用更少。并且在标签管理上也比 Chrome 更为友好。</p><p>最近我也面临内存的问题，也打算切换一下试试。</p><p><img src="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2025/01/firefox-logo-at-the-center-with-fire-surrounding-the-image.jpg"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://github.com/hkdobrev/cleanmac">GitHub - hkdobrev&#x2F;cleanmac: 用脚本清理你的macOS，无需昂贵的应用</a>[^3]</strong></p><p>标签：Tools</p><p>一个清理 Mac 系统的脚本，用来释放磁盘空间、内存等。<br>主要清除了系统日志、brew 的安装包、npm 依赖、不用的 docker 镜像。</p><p>在公司的电脑上试着跑了一下，因为东西太多，还挺花时间的。</p><p>类似的应用有 CleanMyMac、腾讯的 Lemon 等，都挺好用的。</p><p><img src="https://opengraph.githubassets.com/97d72df8b6f376507d1869968b22f1e7a3e81339374942fbc28872dcd0e4bd0c/hkdobrev/cleanmac"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 密歇根TypeScript创始人成功在类型系统内运行毁灭战士游戏…: <a href="https://socket.dev/blog/typescript-types-running-doom">https://socket.dev/blog/typescript-types-running-doom</a></li><li>[2] 为什么我切换到Firefox并从此不再回头: <a href="https://www.howtogeek.com/why-i-switched-to-firefox-and-never-looked-back/">https://www.howtogeek.com/why-i-switched-to-firefox-and-never-looked-back/</a></li><li>[3] GitHub - hkdobrev&#x2F;cleanmac: 用脚本清理你的macOS，无需昂贵的应用: <a href="https://github.com/hkdobrev/cleanmac">https://github.com/hkdobrev/cleanmac</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：所有代码都是技术债</title>
    <link href="/weekly/2025/03/02/08-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250223_20250302/"/>
    <url>/weekly/2025/03/02/08-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250223_20250302/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-23 - 2025-03-02</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><img src="https://cdn.beekka.com/blogimg/asset/202403/bg2024030702.webp"></p><p>这周读完阮一峰老师的周刊，发现去年的这周标题是「所有代码都是技术债」，便再去阅读了一遍。</p><p>结合自己工作下来的感受，我觉得还能再加一个定语“所有需要维护的代码都是技术债”。</p><p>如果一段代码没人使用，或者只是一次性的，倒也无所谓。但需要维护的代码里，每一行可能都会变成未来的债务。漏洞的修复、功能的添加，没人知道昨天的代码会给今天带来的是坑还是洞。上一个人的”花活”会不会是下一个的“噩梦”。</p><p>所以我对自己的要求便是，在尽可能满足现有需求以及可读性的前提下，写最少的代码。适当地留出抽象的空间，反而能减轻日后的工作。有点像国画中的“留白”。</p><p>毕竟如果没有需求，就不用改动；反之结合新需求针对性地做抽象，也能控制修改的范围。我觉得合理的抽象也应该是能减少代码量的。任何会让现有代码量增加的重构，都要三思。</p><p>工程化、各种范式&#x2F;模式、规约；再到强类型语言、内存安全语言、代码格式化工具以及项目管理等，都是前辈们想出的解决技术债务的方法。</p><p>但就像熵的增加一定的，需要维护的代码也注定会越来越庞大。也难怪 Github 上没有一行代码的 nocode 项目拥有 61k 的 star 了。</p><p>或许真到了哪天 AI 全面编写代码，完全不需要人来检查的时候，这个问题才会被解决吧。</p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://bruceyuan.com/post/deepseek-r1-paper-reading-notes.html">自顶向下方式深度解读 DeepSeek-R1，内含大量细节</a>[^1]</strong></p><p>标签：AI</p><p>一篇解读 DeepSeek R1 的技术文章。是作者阅读 DeepSeek 的 Paper 之后的提炼。介绍了技术原理和发展路线，不涉及具体的代码。</p><p>这周忙于处理底层框架替换的问题，只看了一个开头。之后有空了再来阅读。</p><p><img src="https://cfcdn.bruceyuan.com/blog/2025/deepseek-r1-reading-notes-20250216220356516.webp"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/">Smuggling arbitrary data through an emoji</a>[^2]</strong></p><p>标签：FUN</p><p>一篇利用 Unicode 的零宽字符在 Emoji 里“夹带私货”的文章。利用变体字符不会被解析显示且几乎能被复制下来的特性。</p><p>比如在 “g” 后面加上 U+FE01，即 “g\uFE01”。此时人只能看到字母”g”，但如果选中并且复制的话，则会把“g\uFE01”给复制下来。从而达到了“夹带私货”的目的。</p><p>这个特性能做什么呢？首先肯定能绕过人工审核；其次便是增加水印，进行数据追踪。</p><p><img src="https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/tokenizer.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://qr.windliang.wang/">链图 - 链接转图片工具</a>[^3]</strong></p><p>标签：Tools</p><p>一个小工具，可以把连接地址转换为带有二维码的图片，很适合用于社交平台的分享，比如公众号等不能在正文中插入连接的情况。</p><p><img src="/weekly/images/2025/link-pic.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 自顶向下方式深度解读 DeepSeek-R1，内含大量细节: <a href="https://bruceyuan.com/post/deepseek-r1-paper-reading-notes.html">https://bruceyuan.com/post/deepseek-r1-paper-reading-notes.html</a></li><li>[2] Smuggling arbitrary data through an emoji: <a href="https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/">https://paulbutler.org/2025/smuggling-arbitrary-data-through-an-emoji/</a></li><li>[3] 链图 - 链接转图片工具: <a href="https://qr.windliang.wang/">https://qr.windliang.wang/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：杂谈AI取代程序员</title>
    <link href="/weekly/2025/02/23/07-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250216_20250223/"/>
    <url>/weekly/2025/02/23/07-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250216_20250223/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-16 - 2025-02-23</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">杂谈AI取代程序员</a>[^2]</strong></p><p>标签：思考</p><p>强烈建议对这个话题感兴趣的小伙伴去阅读一下原文。这里放一下原文对于 AI 取代论背后动机的分析，我觉得很有道理。</p><blockquote><p> 除去真的担心自己被AI取代的从业者外，我觉得看到两种扯着AI大旗的人。</p><p> 一种就是懂程序开发，装不懂程序开发，然后贩卖焦虑的人，最近非常火的就是，「我用Cursor从0 xx 天开发了一个App」 (Cursor是最近一个很火的AI编辑器，可以通过输入的指令生成代码).</p><p>大体都是说自己完全不懂程序开发，借助AI&#x2F;Cursor, xx天内开发出了一个App, 并且冲到了苹果App Store热门榜第一.</p><p>普通程序员看到这种说法，一个小白从无到有都能开发出一个App, 难免会焦虑,不得不说，这种反向装弱再变强真的令人防不胜防， 想着不能被落下，就斥资加入各种付费群或者购买各种课程。</p><p>神智清明的你可能在心平气和下很难做出这样的决定嘛。<br>另外一种就是要用AI来取代程序的公司，说要通过AI来增效，裁撤工程师，比如国外的 Workday 裁员说要再招人做 AI 的新闻, 还有2023年 Google 因为AI裁员而30000 名员工的新闻。</p><p>因为说是AI取代了程序员，被毕业的员工们和待毕业的员工们都只会把裁员的原因归罪到AI上， 管理层的无所作为，墨守成规，决策失误，无序扩张这些失误都不需要承诺后果了，反正背锅有AI。</p><p>苦一苦员工，骂名AI来担。</p></blockquote><p>接下来聊聊我作为一名普通大龄程序员（非 CS 专业、无大厂经验、对日外包出身、从前端转后端）的感受。</p><p>说实话。刚开始有听到这个论点时，确实有些焦虑。但仔细一想，早在 AI 出现前就已经有低代码取代程序员这种说法了。</p><p>然而现实是，尽管有数十种低代码框架，但程序员依旧在干活。</p><p>对程序员来说，编程或者说开发，实际上占整个工作的比例是最少的。更多的是对需求的理解与分析、技术的选型、架构&#x2F;逻辑的设计、系统部署等问题。针对大型项目，还要考虑任务拆解、人员安排、系统负载、成本控制等众多因素。而这其中除了开发工作之外，都是目前 AI 无法做到的事情。</p><p>就我个人使用体验而言，AI 在写单元测试、文档注释、ChangeLog 上非常有用，减轻了开发者的负担。同时针对一次性的脚本任务，也很不错。但基于现有系统的维护和开发，效果并不理想，还是需要人去介入。</p><p>毕竟从需求到设计就经过了一次翻译，从设计再到提示词，又是一次翻译。每多一次翻译就会造成一次损失，更何况开发者对提示词的理解又各不相同。那结果自然可想而知。</p><p>最后，再次引用原文中观点：</p><blockquote><p>AI现阶段还是无法取代程序员的，未来AI我也觉得很难取代程序员(当然，取代把需求翻译成代码的人肉翻译器还是有可能的)，因为程序员虽然是和机器打交道，但是本质上还是解决人的问题。</p><p>担忧程序员被AI取代的人可能只看到了测试场景里面的 happy path, 也就是AI能生成老板们想要的代码，没有看到unhappy path, 也就是老板们想要的代码, AI生成不出来要怎么办?</p><p>毕竟人可以根据已有的经验进行归纳总结，把已有的经验应用在未踏足的领域，且持续学习，但是AI还是受限于预训练数据，做不出来就是做不出来。</p><p>但是对程序员而言，AI不失为一个好用且提效的工具，好用的工具就应该多学多用多玩，而不是担忧被其取代。</p></blockquote><p>这是作者利用 AI 生成的街舞海报，是不是哪里很奇怪呢？<br><img src="https://ramsayleung.github.io/ox-hugo/genai_cover_image.jpg" alt="作者利用 AI 生成的街舞海报"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://sspai.com/post/96168">装修容易踩坑？这是我的避坑方法论 - 少数派</a>[^1]</strong></p><p>标签：Life</p><p>自从自己装修完之后就开始看这类家装攻略。有点像复盘，看看自己做的不到位和不足的地方。其实这些应该事先预习。</p><p>作者还是蛮厉害的，自己了很多功课甚至设计了图纸。很难得看到实际支出会比预算更低的情况。</p><p>评论区更是值得一看，有很多知识可以学习。有装修需求的小伙伴可以看看。</p><p><strong>2、<a href="https://ivanludvig.dev/tech/lake-colors">湖的名称是否反映其特性？</a>[^5]</strong></p><p>标签：Life</p><p>作者在法国的“绿湖”徒步后，湖水的绿色给他留下了深刻的印象。于是作者开始好奇湖的名称是否能反映其特性？</p><p>于是作者从网上搜集需要的数据并整理成 JSON 格式，然后又从卫星图片中获取对应湖中的一个像素作为颜色。最终结论是湖水的名称与其特性并不相关。</p><p>利用技术手段一步步实现自己的小目标。让我怀念起了刚开始学编程时的快乐与纯粹。</p><p><img src="https://ivanludvig.dev/assets/img/lakes/lac-vert.jpg" alt="作者徒步的绿湖"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://animate.style/">Animate.css | 跨浏览器CSS动画库</a>[^3]</strong></p><p>标签：CSS,前端</p><p>一个 CSS 动画特效库，通过给元素添加类名就能实现对应的动画效果。Github star 有 81 k。</p><p>官网上可以看到各种效果，纯 CSS 体积也很轻。之后如果有前端项目时可以使用。</p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://ishadeed.com/article/overflow-clip/">Overflow Clip属性解析</a>[^4]</strong></p><p>标签：前端,CSS</p><p>介绍了 CSS3 中 <code>overflow:clip</code> 属性。clip 有裁剪的含义，可以裁剪超出父元素的部分，并且不会出现滚动条。类似 overflow:hidden + 滚动条隐藏或者绝对定位等样式组合。</p><p>作者给出了非常详细与易懂的说明和例子，可以做出许多效果。如标题头部、滚动动画、重叠边框等。</p><p><img src="https://ishadeed.com/_astro/hero-clip-1.Br_jpHnV_ZAciKn.webp"></p><p><strong>2、<a href="https://www.yazeedb.com/posts/deeply-understand-currying-in-7-minutes">7分钟深入理解柯里化 - Yazeed Bzadough</a>[^6]</strong></p><p>标签：JavaScript,TypeScript</p><p>面试八股之一的“柯里化”。针对多个参数，进行简化。</p><p>这篇主要介绍实现方法以及调试过程。核心是利用 function 的 length 与闭包实现柯里函数。我自己在工作中遇到的不多，也不太会主动使用。</p><p><img src="https://www.yazeedb.com/media/dog-properly-currying-a-function.jpeg"></p><p><strong>3、<a href="https://joshtronic.com/2025/02/16/how-to-move-the-first-element-to-the-end-in-javascript/">JavaScript中如何将首元素移至末尾</a>[^7]</strong></p><p>标签：前端,JavaScript</p><p>一篇简短的文章，主要讲了现代 Web 开发里利用 <code>container.appendChild(container.firstElementChild);</code> 可以很容易把第一个元素到末尾。具体的应用就是走马灯效果。</p><p>回想十年前做前端时，走马灯的实现会刻意在末尾多重复一次第一个元素，从而使得动画效果看起来是连贯，通过 setInterval 来计算距离和速度。需要写非常多的代码。</p><p><img src="https://joshtronic.com/wp-content/uploads/2025/02/A-clean-and-minimalistic-illustration-of-DOM-manipulation-in-JavaScript.-The-image-should-depict-a-simple-webpage-layout-with-rectangular-blocks-repre.webp"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 装修容易踩坑？这是我的避坑方法论 - 少数派: <a href="https://sspai.com/post/96168">https://sspai.com/post/96168</a></li><li>[2] 杂谈AI取代程序员: <a href="https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/">https://ramsayleung.github.io/zh/post/2025/%E6%9D%82%E8%B0%88ai%E5%8F%96%E4%BB%A3%E7%A8%8B%E5%BA%8F%E5%91%98/</a></li><li>[3] Animate.css | 跨浏览器CSS动画库: <a href="https://animate.style/">https://animate.style/</a></li><li>[4] Overflow Clip属性解析: <a href="https://ishadeed.com/article/overflow-clip/">https://ishadeed.com/article/overflow-clip/</a></li><li>[5] 湖的名称是否反映其特性？: <a href="https://ivanludvig.dev/tech/lake-colors">https://ivanludvig.dev/tech/lake-colors</a></li><li>[6] 7分钟深入理解柯里化 - Yazeed Bzadough: <a href="https://www.yazeedb.com/posts/deeply-understand-currying-in-7-minutes">https://www.yazeedb.com/posts/deeply-understand-currying-in-7-minutes</a></li><li>[7] JavaScript中如何将首元素移至末尾: <a href="https://joshtronic.com/2025/02/16/how-to-move-the-first-element-to-the-end-in-javascript/">https://joshtronic.com/2025/02/16/how-to-move-the-first-element-to-the-end-in-javascript/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：AI 正在造就一代“文盲”程序员</title>
    <link href="/weekly/2025/02/16/06-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250209_20250216/"/>
    <url>/weekly/2025/02/16/06-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250209_20250216/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-09 - 2025-02-16</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://deno.com/blog/deno-v-oracle2">Oracle 曾用 Node.js 证明其 JavaScript 商标权——现在却想推翻这一立场</a>[^1]</strong></p><p>标签：JavaScript,Node.js</p><p>2 年前，Node 和 Deno 的作者期望 Oracle 释放 JavaScript 商标权，然而 Oracle 并没有任何回应。</p><p>于是作者在去年 9 月发表了公开信后，于 11 月向美国专利商标局申请取消 Oracle 的 JavaScript 商标权。这次 Oracle 在截止日提交了动议，继续拖延该问题。</p><p>关于 JavaScript 这个名字的故事，前端的小伙伴应该不会陌生。Oracle 的主业是数据库，和前端以及 JavaScript 并没有交集。因为收购了 Sun 才拥有了 JavaScript 的商标。也正是因为这个商标的问题，才会有 ECMAScript 让人混淆的名称。</p><p>如果支持作者的提议，也可以去文章最后的公开信里签名。非常方便，授权一下 Github 账号即可。</p><p><img src="/weekly/images/2025/oracle-js.png"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://www.ncurator.com/zh">馆长-知识库AI问答助手</a>[^2]</strong></p><p>标签：AI</p><p>Chrome 的 AI 插件，利用 RAG 管理并创造本地知识库。支持文件导入、网页总结等。相当于把个人知识库放到统一的地方，由 AI 管理并回答。支持云端以及本地模型。</p><p><img src="/weekly/images/2025/ncurator.png"></p><p><strong>2、<a href="https://liveblocks.io/blog/which-rich-text-editor-framework-should-you-choose-in-2025#introduction">2025，你会选择哪个富文本编辑器？ | Liveblocks Blog</a>[^4]</strong></p><p>标签：前端,JavaScript,Tools</p><p>因为知道有个 WangEditor，就好奇地去看看会不会被提到。</p><p>果然没有，可能作者是外国人并不了解吧。主要介绍了国外的富文本框架有 Tiptap, BlockNote, Lexical 等 11 个，既有功能丰富也有只提供核心功能的。</p><p>因为不做前端了，具体功能就不细看了。文章最后作者做了非常详细的对比表格。</p><p>这些国外的框架是基础功能免费，附加功能或者服务支持收费的模式。想到 WangEditor 却因为收益不够而不得不暂停维护，还是有些感慨的。如果不能带来收益，再好的产品也很难坚持下去。</p><p>WangEditor 官网：<a href="https://www.wangeditor.com/">https://www.wangeditor.com/</a><br>WangEditor 现状：<a href="https://juejin.cn/post/7272735633458413602#heading-4">https://juejin.cn/post/7272735633458413602#heading-4</a></p><p><img src="https://liveblocks.io/images/blog/social-images/choosing-the-right-text-editor-for-your-app.jpg"></p><hr><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><p><strong>1、<a href="https://nmn.gl/blog/ai-illiterate-programmers">AI 正在造就一代“文盲”程序员</a>[^3]</strong></p><p>标签：思考,AI</p><p>一篇被讨论很多的文章。作者认为 AI 正在造就一代“文盲”程序员。起因是作者发现如果没有 AI的帮助，根本不愿意去解决一个 AWS 的错误。由于有了 AI，作者开始不再仔细阅读文档；成为了一个人形剪切板；也不愿意去思考而是完成 AI 的实现；不再从编程中获得乐趣。</p><p>对此，作者给出了一些“复健”计划</p><ol><li>仔细阅读错误信息。</li><li>实际进行调试。</li><li>从零开始编码。</li><li>阅读源码而非求助于 AI。</li></ol><p>读完后总有一种似曾相识的感觉，互联网在开始时也被视作洪水猛兽。但说到底，工具时好时坏还是取决于对 AI 的定位与使用方式。之前 1:1 时老大也提到过类似的观点：你应该主导 AI 做什么而不是被 AI 牵着鼻子走。</p><p>你提供自己的思考框架，让 AI 来填充。那么AI 是一个强力的辅助工具，能帮助你节省时间提高效率。如果反过来，你就会变成 AI 的打工仔，久而久之便丧失了自己的理解与思考。</p><p><img src="https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror=redirect,quality=80/uploads/asset/file/e7b24776-a98a-4a27-a079-2426fd468ffd/image.png?t=1737992598"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Oracle 曾用 Node.js 证明其 JavaScript 商标权——现在却想推翻这一立场: <a href="https://deno.com/blog/deno-v-oracle2">https://deno.com/blog/deno-v-oracle2</a></li><li>[2] 馆长-知识库AI问答助手: <a href="https://www.ncurator.com/zh">https://www.ncurator.com/zh</a></li><li>[3] AI 正在造就一代“文盲”程序员: <a href="https://nmn.gl/blog/ai-illiterate-programmers">https://nmn.gl/blog/ai-illiterate-programmers</a></li><li>[4] 2025 年该选择哪个富文本编辑器框架？ | Liveblocks Blog: <a href="https://liveblocks.io/blog/which-rich-text-editor-framework-should-you-choose-in-2025#introduction">https://liveblocks.io/blog/which-rich-text-editor-framework-should-you-choose-in-2025#introduction</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-02-02 - 2025-02-09</title>
    <link href="/weekly/2025/02/09/05-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250202_20250209/"/>
    <url>/weekly/2025/02/09/05-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250202_20250209/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-02-02 - 2025-02-09</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://yazi-rs.github.io/">Yazi</a>[^1]</strong></p><p>标签：Tools,Mac</p><p>闲逛 B 站时推送的视频，被名字吸引。是一个终端的文件管理工具。特别适合平时在终端工作的同学。作者也是一个国人大佬：三咲雅 · Misaki Masa</p><p>使用下来体验很棒，绝非传统的 cd&#x2F;ls&#x2F;cat 命令组合能比的。还能配合 Neovim 非常丝滑。</p><p>推荐插件：</p><ol><li>yazi.nvim: Neovim 插件。 <a href="https://github.com/mikavilpas/yazi.nvim">https://github.com/mikavilpas/yazi.nvim</a></li><li>full-border: 瞬间让 yazi 的界面高大上起来。 <a href="https://github.com/yazi-rs/plugins/tree/main/full-border.yazi">https://github.com/yazi-rs/plugins/tree/main/full-border.yazi</a></li><li>icons-brew: 为不同的文件添加 icon，让界面更美观。 <a href="https://github.com/lpnh/icons-brew.yazi">https://github.com/lpnh/icons-brew.yazi</a></li></ol><p><img src="https://yazi-rs.github.io/img/logo.png"></p><p><strong>2、<a href="https://readpo.com/zh/poster">ReadPo</a>[^4]</strong></p><p>标签：Tools,AI</p><p>在寻找 Markdown 转图片时找到的这个网站。提供了一个免费的在线转换工具。</p><p>这个网站主要的功能是基于主题的 AI 辅助写作工具。同一个主题下可以订阅不同的源，如 Google、RSS 等，AI 可以根据这些内容生成文章。主要的应用场景就是新闻、资讯介绍、事件追踪等文章。</p><p>免费版支持 2 个主题，每月 30 个 cridets。每个主题可以根据 5 个文章生成 AI 总结内容，挺有意思的工具。</p><p><img src="/weekly/images/2025/readpo.webp"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://www.infoworld.com/article/2269523/put-business-logic-in-the-application-not-the-database.html">Put business logic in the application, not the database</a>[^2]</strong></p><p>标签：架构,Design</p><p>有些年头的文章了，其主旨是尽可能地把业务逻辑放到应用层而非数据库，并且给出了原因：</p><ol><li>数据库比起应用层，资源更加稀缺。</li><li>逻辑后移到数据库会增加负担，造成应用层资源的浪费。</li><li>数据库拓展成本比应用层更高。</li></ol><p>应该是针对 SQL 存储过程写的。我在实际工作中主要使用 MongoDB，基本不会出现业务逻辑在数据库的情况也没人会在业务中做聚合。（真做了也过不了 Code Review）</p><p>尽管如此，数据库的成本也远高于服务器的成本。上云之后，拓展不是问题，剩下的只是钱的问题。</p><p><img src="https://www.infoworld.com/wp-content/uploads/2024/06/broken-chain_metal_link_breach_security-100777433-orig.jpg?resize=1024,683&quality=50&strip=all"></p><p><strong>2、<a href="https://www.joshwcomeau.com/css/custom-css-reset/">A Modern CSS Reset • Josh W. Comeau</a>[^3]</strong></p><p>标签：CSS,前端</p><p>这篇介绍了现代版本的 CSS reset。10 年前各个浏览器之间差异很大，开发时会用上一份 CSS reset 样式尽可能抹平这些差异。</p><p>比较经典的是 Eric Meyers 2011 年的版本，早年入坑的前端小伙伴可能都有点印象。 <a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></p><p>随着 IE 退场已经对 CSS 新特性的支持增加。如今的 CSS reset 内容要简洁许多。我现在主要做 Node.js 服务端开发，就不去逐条查看了。作者针对每一条都有说明，感兴趣的前端同学可以去看看。</p><p><img src="https://www.joshwcomeau.com/images/og-custom-css-reset.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Yazi: <a href="https://yazi-rs.github.io/">https://yazi-rs.github.io/</a></li><li>[2] Put business logic in the application, not the database: <a href="https://www.infoworld.com/article/2269523/put-business-logic-in-the-application-not-the-database.html">https://www.infoworld.com/article/2269523/put-business-logic-in-the-application-not-the-database.html</a></li><li>[3] A Modern CSS Reset • Josh W. Comeau: <a href="https://www.joshwcomeau.com/css/custom-css-reset/">https://www.joshwcomeau.com/css/custom-css-reset/</a></li><li>[4] ReadPo: <a href="https://readpo.com/zh/poster">https://readpo.com/zh/poster</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-26 - 2025-02-02</title>
    <link href="/weekly/2025/02/02/04-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250126_20250202/"/>
    <url>/weekly/2025/02/02/04-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250126_20250202/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-26 - 2025-02-02</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://ghostty.org/">Ghostty</a>[^1]</strong></p><p>标签：Tools</p><p>一个终端模拟器，类似 iTerm2、Tabby。利用了 GPU 和 CPU 加速。</p><p>目前使用下来体验不错，速度比 iTerm2 和 Tabby 要快且无缝支持 zsh 的配置。唯一的缺点是配置文件需要自己去看文档写，没有 GUI 界面。</p><p><img src="https://ghostty.org/social-share-card.jpg"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://arktype.io/">ArkType</a>[^2]</strong></p><p>标签：Resource,JavaScript,TypeScript</p><p>一个类似于 Joi 的校验库。官网上写着有更好的错误提示、性能上也比其他库如 Zod、Yup 要强。</p><p>工作中使用 Joi，但苦于其效率和多版本之间的冲突也一直在看其他类似的库。这个库比较新，生态方面并没有 Zod 完善，考虑到迁移和文档自动生成的成本，选择 Zod 的可能性更高。</p><p><img src="/weekly/images/2025/arktype.webp"></p><p><strong>2、<a href="https://nalanj.dev/posts/safe-assignment/">Safe Assignment | Alan Johnson</a>[^3]</strong></p><p>标签：JavaScript</p><p>一个关于 JS try&#x2F;catch 语法的新提案。<br>const [error, value] ?&#x3D; maybeThrows();<br>看着像 Go 的语法，主要是节约了 try&#x2F;catch 的代码长度以及避免在外层多定义 let 来对错误做处理。</p><p>文章给出了类似的实现，看了更有种回调时期的感觉。不过同样的讨论，之前翻译过的一篇感觉说的更清新一些。<br>译：在 TypeScript 中像 Go 和 Rust 那样处理错误？没有 Try&#x2F;Catch(<a href="https://konata9.github.io/2024/05/10/2024/translate-ts-with-go-and-rust-errors/)">https://konata9.github.io/2024/05/10/2024/translate-ts-with-go-and-rust-errors/)</a></p><p><img src="/weekly/images/2025/safe-assignment.webp"></p><p><strong>3、<a href="https://docs.timetime.in/blog/how-long-is-a-second-in-js/">How long is a second in JavaScript? | TimeTime</a>[^4]</strong></p><p>标签：JavaScript</p><p>很不错的一篇文章，从 1 秒入手介绍了 JavaScript 中时间相关的知识。 UTC 和 POSIX 的区别，特别是对于闰秒的处理。更多的是通用概念的介绍。</p><p><img src="https://external-preview.redd.it/problematic-second-how-the-leap-second-occurring-only-27-v0-Z9P05vL4s6Z3mcXjAxcxwy6C8p64zhxV_-vlWRmRmkQ.jpg?auto=webp&s=e7112eb8e30bef1ac3b1cb98c817c9f48b7bd0a2"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Ghostty: <a href="https://ghostty.org/">https://ghostty.org/</a></li><li>[2] ArkType: <a href="https://arktype.io/">https://arktype.io/</a></li><li>[3] Safe Assignment | Alan Johnson: <a href="https://nalanj.dev/posts/safe-assignment/">https://nalanj.dev/posts/safe-assignment/</a></li><li>[4] How long is a second in JavaScript? | TimeTime: <a href="https://docs.timetime.in/blog/how-long-is-a-second-in-js/">https://docs.timetime.in/blog/how-long-is-a-second-in-js/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-19 - 2025-01-26</title>
    <link href="/weekly/2025/01/26/03-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250119_20250126/"/>
    <url>/weekly/2025/01/26/03-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250119_20250126/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-19 - 2025-01-26</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack">EP146: The Open Source AI Stack</a>[^1]</strong></p><p>标签：架构</p><p>ByteByteGo 的 Newsletter。可以用 RSS Hub 作为 RSS 订阅。每周一篇都是和架构相关内容。图片做的非常棒。</p><p>这篇我着重看了鉴权方式的部分。Cookies Vs Sessions Vs JWT Vs PASETO 介绍了常见的几种鉴权方式以及优缺点。除了 PASETO 没有接触过，之后要找机会了解一下。</p><p><img src="https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1c328642-7222-4127-a6c5-16614e010022_1283x1536.jpeg"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.dev-life.site/">自洽的程序员</a>[^2]</strong></p><p>标签：Life,工作,思考</p><p>我看的两个周刊都在推这本书。书名虽然带着“程序员”，但内容主要集中于调整工作中的心态。每一篇都很短，阅读起来没有负担。没有专业名词、没有方法论，更像是一个学长&#x2F;前辈跟你聊天的感觉， 轻松的同时也有所收获。</p><p>我阅读了第三章并回顾工作中的一些表现，确实还有需要改进的地方。很受用，非常值得一读。</p><p>放一些我认为不错的观点：<br> 工作中的挣扎就像人生的必修课：不是你的错，但要你来解决。不是你能控制的，但要你来负责。不是你想要的，但要你来面对。</p><p> 工作就像人生的一个维度：它很重要，但不是唯一。它需要投入，但要有度。它值得认真，但别太执着。</p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://d2lang.com/">Home | D2 Documentation</a>[^3]</strong></p><p>标签：Tools</p><p>类似 Markdown 中作图的方式，通过写代码的方式来制作类图、流程图等。语法比 Mermaid 要复杂，但相对的做出的图片的效果也比 Mermaid 更好。</p><p>个人还是比较喜欢代码做图的方式，容易保存和修改。等有机会试一下。</p><p><img src="https://d2lang.com/img/opengraph.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] EP146: The Open Source AI Stack: <a href="https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack">https://blog.bytebytego.com/p/ep146-the-open-source-ai-stack</a></li><li>[2] 自洽的程序员: <a href="https://www.dev-life.site/">https://www.dev-life.site/</a></li><li>[3] Home | D2 Documentation: <a href="https://d2lang.com/">https://d2lang.com/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-12 - 2025-01-19</title>
    <link href="/weekly/2025/01/19/02-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250112_20250119/"/>
    <url>/weekly/2025/01/19/02-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250112_20250119/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-12 - 2025-01-19</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://icemenubar.app/">Ice - Menu Bar Manager</a>[^1]</strong></p><p>标签：Tools,Mac</p><p>Mac 的 menu bar 小工具，拯救因刘海屏显示不下的小图标。之前用过 Hidden。但 Hidden 展开后对被刘海挡住的部分还是无能为力。而 Ice 则直接把隐藏的图标展示到 menu bar 下面，避免了这个问题。</p><p><img src="https://icemenubar.app/gallery_gen/726e843ac2a8881c562e1bc64c5b560f_fit.svg"></p><p><strong>2、<a href="https://inputsource.pro/zh-CN">Input Source Pro</a>[^2]</strong></p><p>标签：Tools,Mac</p><p>当前输入法提示的小工具，还可以定制 APP 的默认输入法。对于工作时在 Teams 和编辑器之间来回切换很有用。</p><p><img src="https://inputsource.pro/img/illustration.jpg?1736741258334"></p><p><strong>3、<a href="https://slea.ai/zh-CN">用Slea.ai免费AI Logo生成器轻松创建专业Logo</a>[^5]</strong></p><p>标签：Tools</p><p>免费生成 AI Logo 的工具网站。对不擅长设计的开发者会有所帮助。</p><p><img src="https://slea.ai/logo.png"></p><hr><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><strong>1、<a href="https://tomekdev.com/posts/benchmarking-graphql-solutions-in-the-js-ts-landscape">Benchmarking GraphQL solutions in the JS&#x2F;TS landscape</a>[^3]</strong></p><p>标签：JavaScript,Node.js,GraphQL</p><p>针对 GraphQL 在不同的 Node.js 运行时（Node、Bun、Deno）和不同框架（Nest、Fastify、Express）下的性能测试。作者详细列举了 GraphQL 的技术栈、框架的选择以及测试方式。</p><p>结论：<br>按照 NestJS 教程搭建的 GraphQL Server 的性能最差。<br>Fastify + mercurius + graphql-jit 在 Node.js 的运行时下的组合性能最佳，并且解析器对性能的影响十分严重，能降低 80% 性能。只有必要时才应该开启。</p><p><img src="https://tomekdev.com/static/cce89cde80553304bfcd2a589fef4595/012-graphql-benchmarks.png"></p><p><strong>2、<a href="https://blog.logto.io/css-only-infinite-scroll">CSS-only infinite scrolling carousel animation · Logto blog</a>[^6]</strong></p><p>标签：CSS,前端</p><p>纯 CSS 实现的无限滚动效果，支持鼠标悬浮暂停。通过 Flex + animation 组合实现。文章讲的很好，一步一步配合示例代码十分易懂。感兴趣的小伙伴可以看看。现代 CSS 比起当年做前端时能做的太多了。</p><p><img src="https://uploads.strapi.logto.io/2/css_only_animation_infinite_scrolling_carousel_9a669693ab.webp"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://1q43.blog/post/10851/">胖东来是非学不可了 | 虹线</a>[^4]</strong></p><p>标签：思考</p><p>从另一个角度分析了胖东来出圈的原因。重点讲了胖东来是如何成为“神话”的原因。时代的变化凸显了胖东来的存在，有一种潮水褪去后的感觉。</p><blockquote><p>胖东来模式在上一个时代是不合时宜的，它更像是下一个时代的最优解，即宏观存量市场下的微观无杠杆经营。</p><p>在上一个时代，注定了不用杠杆打不过用杠杆的，毕竟无论是拿地、选品还是招聘，你的竞争对手只要想都能以无视经济规律，“不计商业成本”的方式与你竞争。</p><p> 但在下一个去杠杆时代，一切都会反转，不用杠杆能活下来是第一位，能经营好则能胜出。这才是胖东来“优秀了20年”，这么晚才“出圈”的原因。</p></blockquote><p>分析的很有意思，值得详细一读。</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] Ice - Menu Bar Manager: <a href="https://icemenubar.app/">https://icemenubar.app/</a></li><li>[2] Input Source Pro: <a href="https://inputsource.pro/zh-CN">https://inputsource.pro/zh-CN</a></li><li>[3] Benchmarking GraphQL solutions in the JS&#x2F;TS landscape: <a href="https://tomekdev.com/posts/benchmarking-graphql-solutions-in-the-js-ts-landscape">https://tomekdev.com/posts/benchmarking-graphql-solutions-in-the-js-ts-landscape</a></li><li>[4] 胖东来是非学不可了 | 虹线: <a href="https://1q43.blog/post/10851/">https://1q43.blog/post/10851/</a></li><li>[5] 用Slea.ai免费AI Logo生成器轻松创建专业Logo: <a href="https://slea.ai/zh-CN">https://slea.ai/zh-CN</a></li><li>[6] CSS-only infinite scrolling carousel animation · Logto blog: <a href="https://blog.logto.io/css-only-infinite-scroll">https://blog.logto.io/css-only-infinite-scroll</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周见闻分享：2025-01-05 - 2025-01-12</title>
    <link href="/weekly/2025/01/12/01-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250105_20250112/"/>
    <url>/weekly/2025/01/12/01-%E6%AF%8F%E5%91%A8%E8%A7%81%E9%97%BB-20250105_20250112/</url>
    
    <content type="html"><![CDATA[<p>每周见闻分享：2025-01-05 - 2025-01-12</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>1、<a href="https://www.v2ex.com/t/1102126">我是如何从零开始手搓一个独立游戏并上架 Steam 的 - V2EX</a>[^1]</strong></p><p>标签：Life,励志</p><p>讲述了作者历经 5 年制作独立游戏《中国式加班》的完整过程。<br>包括了构思和规划、美术、引擎选型、剧本构思。中途一度因资源不足夭折，最后又借助 AI 完成第一版并成功上架 Steam。</p><p>非常佩服作者的坚持。AI 降低了门槛，让很多事情变得可能。特别赞同完成比完美更重要这一点。过早追求完美，反而可能是最大的阻力。值得细细阅读。</p><p><img src="https://hhacker.com/wp-content/uploads/2025/01/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-01-221738.png"></p><p><strong>2、<a href="https://sspai.com/post/86260">万字干货！手把手带你根除手机&amp;短视频成瘾？ - 少数派</a>[^2]</strong></p><p>标签：自律,时间管理</p><p>我自己应该是有些手机依赖的，感觉自己能静下心做事的时间变短了。为此我打开了屏幕时间功能，某站在使用时间上确实独占鳌头。这篇文章有点长，但是讲的很详细。快消或者奶头乐通过不断地刺激会逐渐封锁认知，消磨掉我们的“有效时间”。</p><p>其中内因可以分为无聊成瘾以及放松成瘾；外因则是推荐算法。两者加持下提高对刺激的阈值，从而逐渐成瘾。类似一刀切的强行对抗，不仅需要强大的意志力而且也不能从根本上解决问题。</p><p>作者提出将日程排满以及通过引入更多好的习惯来“冲淡”刷视频的习惯，似乎比较可行。打算试着尝试一下。</p><p><img src="https://cdnfile.sspai.com/2024/02/02/article/4b718cfa0cbb0ca738087f48d106e3e8?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p><strong>3、<a href="https://wukan.me/?p=2649">四年五个月 – 阿倫的孤獨星球</a>[^4]</strong></p><p>标签：Life,工作</p><p>讲述了作者 4 年 5 个月的时间分别在国内与国外的工作经历（都是在外企）。对比了两边的生活体验以及对产品的看法和技术氛围。有种“一方水土养一方人”的感觉。<br>国内对领导的心理按摩是造成卷的原因之一，而这背后也体现了对员工个体的尊重与信任。</p><p><img src="https://wukan.me/wp-content/uploads/2024/12/DALL%C2%B7E-2024-12-10-23.19.16-A-highly-minimalistic-and-abstract-illustration-symbolizing-the-contrast-between-two-work-cultures-formatted-in-a-16_9-aspect-ratio.-The-image-featur-768x439.webp"></p><p><strong>4、<a href="https://sspai.com/post/95152">2024年的大环境下；开了个副业淘宝店的过程记录与阶段性感悟 - 少数派</a>[^6]</strong></p><p>标签：Life,副业</p><p>被标题吸引，读完发现很有意思。<br>作者详细讲述了自己开淘宝店作为副业的过程。包括了开店、引流、定价、客服等。没有噱头，全是作者的感受。实打实的细节和干货，非常值得一读。<br>看完最深的感受是一个店背后各种事务真的很复杂。除了自己要有渠道和相应的知识外，其他的事情也很多。</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/44cb6954-457a-4a64-b86e-85f433992a93/f6f89fe3-fe5e-4211-ae67-9810d82f1604/stn-LrT5834M7sDxQdgk89aT6GgoFHU1j0Q6kStFGmvb.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250112/us-west-2/s3/aws4_request&X-Amz-Date=20250112T150138Z&X-Amz-Expires=3600&X-Amz-Signature=282cc1b30235780f60709c64defd13c073ccdd032e026ddf0aef12d79e95b6b4&X-Amz-SignedHeaders=host&x-id=GetObject"></p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>1、<a href="https://www.ppbzy.com/">泡泡白噪音-倾听下雨的声音</a>[^3]</strong></p><p>标签：Tools</p><p>白噪音的工具网站。自带一个番茄钟和电子木鱼（笑）。最近休息在家的时候，有点没法集中，尝试一下。有预设好的模式，可以直接使用。</p><p><img src="/weekly/images/2025/ppbzy.webp"></p><p><strong>2、<a href="https://weiyen.net/articles/useful-macos-cmd-line-utilities/">Useful built-in macOS command-line utilities</a>[^5]</strong></p><p>标签：Mac</p><p>介绍了一些 Mac 内置的终端命令。我觉得比较有用的是下面几个命令，可以不用再去网上找在线工具了。</p><ol><li>查看日期的 date 命令。</li><li>生成 UUID 的 uuidgen 。</li><li>剪切板相关命令 pbcopy 和 pbpaste 。</li></ol><p><img src="https://weiyen.net/articles/useful-macos-cmd-line-utilities/oggraph.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li>[1] 我是如何从零开始手搓一个独立游戏并上架 Steam 的 - V2EX: <a href="https://www.v2ex.com/t/1102126">https://www.v2ex.com/t/1102126</a></li><li>[2] 万字干货！手把手带你根除手机&amp;短视频成瘾？ - 少数派: <a href="https://sspai.com/post/86260">https://sspai.com/post/86260</a></li><li>[3] 泡泡白噪音-倾听下雨的声音: <a href="https://www.ppbzy.com/">https://www.ppbzy.com/</a></li><li>[4] 四年五个月 – 阿倫的孤獨星球: <a href="https://wukan.me/?p=2649">https://wukan.me/?p=2649</a></li><li>[5] Useful built-in macOS command-line utilities: <a href="https://weiyen.net/articles/useful-macos-cmd-line-utilities/">https://weiyen.net/articles/useful-macos-cmd-line-utilities/</a></li><li>[6] 2024年的大环境下；开了个副业淘宝店的过程记录与阶段性感悟 - 少数派: <a href="https://sspai.com/post/95152">https://sspai.com/post/95152</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
